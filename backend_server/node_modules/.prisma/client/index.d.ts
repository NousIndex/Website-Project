
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model API_Usage
 * 
 */
export type API_Usage = $Result.DefaultSelection<Prisma.$API_UsagePayload>
/**
 * Model Banners
 * 
 */
export type Banners = $Result.DefaultSelection<Prisma.$BannersPayload>
/**
 * Model Character_Birthdays
 * 
 */
export type Character_Birthdays = $Result.DefaultSelection<Prisma.$Character_BirthdaysPayload>
/**
 * Model Codes
 * 
 */
export type Codes = $Result.DefaultSelection<Prisma.$CodesPayload>
/**
 * Model Events
 * 
 */
export type Events = $Result.DefaultSelection<Prisma.$EventsPayload>
/**
 * Model Game_General
 * 
 */
export type Game_General = $Result.DefaultSelection<Prisma.$Game_GeneralPayload>
/**
 * Model Games_Users
 * 
 */
export type Games_Users = $Result.DefaultSelection<Prisma.$Games_UsersPayload>
/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Genshin_Draw
 * 
 */
export type Genshin_Draw = $Result.DefaultSelection<Prisma.$Genshin_DrawPayload>
/**
 * Model StarRail_Draw
 * 
 */
export type StarRail_Draw = $Result.DefaultSelection<Prisma.$StarRail_DrawPayload>
/**
 * Model SummaryTable
 * 
 */
export type SummaryTable = $Result.DefaultSelection<Prisma.$SummaryTablePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more API_Usages
 * const aPI_Usages = await prisma.aPI_Usage.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more API_Usages
   * const aPI_Usages = await prisma.aPI_Usage.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.aPI_Usage`: Exposes CRUD operations for the **API_Usage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more API_Usages
    * const aPI_Usages = await prisma.aPI_Usage.findMany()
    * ```
    */
  get aPI_Usage(): Prisma.API_UsageDelegate<ExtArgs>;

  /**
   * `prisma.banners`: Exposes CRUD operations for the **Banners** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Banners
    * const banners = await prisma.banners.findMany()
    * ```
    */
  get banners(): Prisma.BannersDelegate<ExtArgs>;

  /**
   * `prisma.character_Birthdays`: Exposes CRUD operations for the **Character_Birthdays** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Character_Birthdays
    * const character_Birthdays = await prisma.character_Birthdays.findMany()
    * ```
    */
  get character_Birthdays(): Prisma.Character_BirthdaysDelegate<ExtArgs>;

  /**
   * `prisma.codes`: Exposes CRUD operations for the **Codes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Codes
    * const codes = await prisma.codes.findMany()
    * ```
    */
  get codes(): Prisma.CodesDelegate<ExtArgs>;

  /**
   * `prisma.events`: Exposes CRUD operations for the **Events** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.events.findMany()
    * ```
    */
  get events(): Prisma.EventsDelegate<ExtArgs>;

  /**
   * `prisma.game_General`: Exposes CRUD operations for the **Game_General** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Game_Generals
    * const game_Generals = await prisma.game_General.findMany()
    * ```
    */
  get game_General(): Prisma.Game_GeneralDelegate<ExtArgs>;

  /**
   * `prisma.games_Users`: Exposes CRUD operations for the **Games_Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games_Users
    * const games_Users = await prisma.games_Users.findMany()
    * ```
    */
  get games_Users(): Prisma.Games_UsersDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.genshin_Draw`: Exposes CRUD operations for the **Genshin_Draw** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genshin_Draws
    * const genshin_Draws = await prisma.genshin_Draw.findMany()
    * ```
    */
  get genshin_Draw(): Prisma.Genshin_DrawDelegate<ExtArgs>;

  /**
   * `prisma.starRail_Draw`: Exposes CRUD operations for the **StarRail_Draw** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StarRail_Draws
    * const starRail_Draws = await prisma.starRail_Draw.findMany()
    * ```
    */
  get starRail_Draw(): Prisma.StarRail_DrawDelegate<ExtArgs>;

  /**
   * `prisma.summaryTable`: Exposes CRUD operations for the **SummaryTable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SummaryTables
    * const summaryTables = await prisma.summaryTable.findMany()
    * ```
    */
  get summaryTable(): Prisma.SummaryTableDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.1
   * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    API_Usage: 'API_Usage',
    Banners: 'Banners',
    Character_Birthdays: 'Character_Birthdays',
    Codes: 'Codes',
    Events: 'Events',
    Game_General: 'Game_General',
    Games_Users: 'Games_Users',
    Users: 'Users',
    Genshin_Draw: 'Genshin_Draw',
    StarRail_Draw: 'StarRail_Draw',
    SummaryTable: 'SummaryTable'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'aPI_Usage' | 'banners' | 'character_Birthdays' | 'codes' | 'events' | 'game_General' | 'games_Users' | 'users' | 'genshin_Draw' | 'starRail_Draw' | 'summaryTable'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      API_Usage: {
        payload: Prisma.$API_UsagePayload<ExtArgs>
        fields: Prisma.API_UsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.API_UsageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$API_UsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.API_UsageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$API_UsagePayload>
          }
          findFirst: {
            args: Prisma.API_UsageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$API_UsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.API_UsageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$API_UsagePayload>
          }
          findMany: {
            args: Prisma.API_UsageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$API_UsagePayload>[]
          }
          create: {
            args: Prisma.API_UsageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$API_UsagePayload>
          }
          createMany: {
            args: Prisma.API_UsageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.API_UsageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$API_UsagePayload>
          }
          update: {
            args: Prisma.API_UsageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$API_UsagePayload>
          }
          deleteMany: {
            args: Prisma.API_UsageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.API_UsageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.API_UsageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$API_UsagePayload>
          }
          aggregate: {
            args: Prisma.API_UsageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAPI_Usage>
          }
          groupBy: {
            args: Prisma.API_UsageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<API_UsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.API_UsageCountArgs<ExtArgs>,
            result: $Utils.Optional<API_UsageCountAggregateOutputType> | number
          }
        }
      }
      Banners: {
        payload: Prisma.$BannersPayload<ExtArgs>
        fields: Prisma.BannersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BannersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BannersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BannersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BannersPayload>
          }
          findFirst: {
            args: Prisma.BannersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BannersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BannersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BannersPayload>
          }
          findMany: {
            args: Prisma.BannersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BannersPayload>[]
          }
          create: {
            args: Prisma.BannersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BannersPayload>
          }
          createMany: {
            args: Prisma.BannersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BannersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BannersPayload>
          }
          update: {
            args: Prisma.BannersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BannersPayload>
          }
          deleteMany: {
            args: Prisma.BannersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BannersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BannersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BannersPayload>
          }
          aggregate: {
            args: Prisma.BannersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBanners>
          }
          groupBy: {
            args: Prisma.BannersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BannersGroupByOutputType>[]
          }
          count: {
            args: Prisma.BannersCountArgs<ExtArgs>,
            result: $Utils.Optional<BannersCountAggregateOutputType> | number
          }
        }
      }
      Character_Birthdays: {
        payload: Prisma.$Character_BirthdaysPayload<ExtArgs>
        fields: Prisma.Character_BirthdaysFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Character_BirthdaysFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_BirthdaysPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Character_BirthdaysFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_BirthdaysPayload>
          }
          findFirst: {
            args: Prisma.Character_BirthdaysFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_BirthdaysPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Character_BirthdaysFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_BirthdaysPayload>
          }
          findMany: {
            args: Prisma.Character_BirthdaysFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_BirthdaysPayload>[]
          }
          create: {
            args: Prisma.Character_BirthdaysCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_BirthdaysPayload>
          }
          createMany: {
            args: Prisma.Character_BirthdaysCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Character_BirthdaysDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_BirthdaysPayload>
          }
          update: {
            args: Prisma.Character_BirthdaysUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_BirthdaysPayload>
          }
          deleteMany: {
            args: Prisma.Character_BirthdaysDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Character_BirthdaysUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Character_BirthdaysUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_BirthdaysPayload>
          }
          aggregate: {
            args: Prisma.Character_BirthdaysAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCharacter_Birthdays>
          }
          groupBy: {
            args: Prisma.Character_BirthdaysGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Character_BirthdaysGroupByOutputType>[]
          }
          count: {
            args: Prisma.Character_BirthdaysCountArgs<ExtArgs>,
            result: $Utils.Optional<Character_BirthdaysCountAggregateOutputType> | number
          }
        }
      }
      Codes: {
        payload: Prisma.$CodesPayload<ExtArgs>
        fields: Prisma.CodesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CodesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CodesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CodesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CodesPayload>
          }
          findFirst: {
            args: Prisma.CodesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CodesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CodesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CodesPayload>
          }
          findMany: {
            args: Prisma.CodesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CodesPayload>[]
          }
          create: {
            args: Prisma.CodesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CodesPayload>
          }
          createMany: {
            args: Prisma.CodesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CodesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CodesPayload>
          }
          update: {
            args: Prisma.CodesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CodesPayload>
          }
          deleteMany: {
            args: Prisma.CodesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CodesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CodesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CodesPayload>
          }
          aggregate: {
            args: Prisma.CodesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCodes>
          }
          groupBy: {
            args: Prisma.CodesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CodesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CodesCountArgs<ExtArgs>,
            result: $Utils.Optional<CodesCountAggregateOutputType> | number
          }
        }
      }
      Events: {
        payload: Prisma.$EventsPayload<ExtArgs>
        fields: Prisma.EventsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          findFirst: {
            args: Prisma.EventsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          findMany: {
            args: Prisma.EventsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>[]
          }
          create: {
            args: Prisma.EventsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          createMany: {
            args: Prisma.EventsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EventsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          update: {
            args: Prisma.EventsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          deleteMany: {
            args: Prisma.EventsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EventsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EventsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          aggregate: {
            args: Prisma.EventsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEvents>
          }
          groupBy: {
            args: Prisma.EventsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventsGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventsCountArgs<ExtArgs>,
            result: $Utils.Optional<EventsCountAggregateOutputType> | number
          }
        }
      }
      Game_General: {
        payload: Prisma.$Game_GeneralPayload<ExtArgs>
        fields: Prisma.Game_GeneralFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Game_GeneralFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Game_GeneralPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Game_GeneralFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Game_GeneralPayload>
          }
          findFirst: {
            args: Prisma.Game_GeneralFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Game_GeneralPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Game_GeneralFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Game_GeneralPayload>
          }
          findMany: {
            args: Prisma.Game_GeneralFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Game_GeneralPayload>[]
          }
          create: {
            args: Prisma.Game_GeneralCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Game_GeneralPayload>
          }
          createMany: {
            args: Prisma.Game_GeneralCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Game_GeneralDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Game_GeneralPayload>
          }
          update: {
            args: Prisma.Game_GeneralUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Game_GeneralPayload>
          }
          deleteMany: {
            args: Prisma.Game_GeneralDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Game_GeneralUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Game_GeneralUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Game_GeneralPayload>
          }
          aggregate: {
            args: Prisma.Game_GeneralAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGame_General>
          }
          groupBy: {
            args: Prisma.Game_GeneralGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Game_GeneralGroupByOutputType>[]
          }
          count: {
            args: Prisma.Game_GeneralCountArgs<ExtArgs>,
            result: $Utils.Optional<Game_GeneralCountAggregateOutputType> | number
          }
        }
      }
      Games_Users: {
        payload: Prisma.$Games_UsersPayload<ExtArgs>
        fields: Prisma.Games_UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Games_UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Games_UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Games_UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Games_UsersPayload>
          }
          findFirst: {
            args: Prisma.Games_UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Games_UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Games_UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Games_UsersPayload>
          }
          findMany: {
            args: Prisma.Games_UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Games_UsersPayload>[]
          }
          create: {
            args: Prisma.Games_UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Games_UsersPayload>
          }
          createMany: {
            args: Prisma.Games_UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Games_UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Games_UsersPayload>
          }
          update: {
            args: Prisma.Games_UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Games_UsersPayload>
          }
          deleteMany: {
            args: Prisma.Games_UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Games_UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Games_UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Games_UsersPayload>
          }
          aggregate: {
            args: Prisma.Games_UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGames_Users>
          }
          groupBy: {
            args: Prisma.Games_UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Games_UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.Games_UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<Games_UsersCountAggregateOutputType> | number
          }
        }
      }
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Genshin_Draw: {
        payload: Prisma.$Genshin_DrawPayload<ExtArgs>
        fields: Prisma.Genshin_DrawFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Genshin_DrawFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Genshin_DrawPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Genshin_DrawFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Genshin_DrawPayload>
          }
          findFirst: {
            args: Prisma.Genshin_DrawFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Genshin_DrawPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Genshin_DrawFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Genshin_DrawPayload>
          }
          findMany: {
            args: Prisma.Genshin_DrawFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Genshin_DrawPayload>[]
          }
          create: {
            args: Prisma.Genshin_DrawCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Genshin_DrawPayload>
          }
          createMany: {
            args: Prisma.Genshin_DrawCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Genshin_DrawDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Genshin_DrawPayload>
          }
          update: {
            args: Prisma.Genshin_DrawUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Genshin_DrawPayload>
          }
          deleteMany: {
            args: Prisma.Genshin_DrawDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Genshin_DrawUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Genshin_DrawUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Genshin_DrawPayload>
          }
          aggregate: {
            args: Prisma.Genshin_DrawAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGenshin_Draw>
          }
          groupBy: {
            args: Prisma.Genshin_DrawGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Genshin_DrawGroupByOutputType>[]
          }
          count: {
            args: Prisma.Genshin_DrawCountArgs<ExtArgs>,
            result: $Utils.Optional<Genshin_DrawCountAggregateOutputType> | number
          }
        }
      }
      StarRail_Draw: {
        payload: Prisma.$StarRail_DrawPayload<ExtArgs>
        fields: Prisma.StarRail_DrawFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StarRail_DrawFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarRail_DrawPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StarRail_DrawFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarRail_DrawPayload>
          }
          findFirst: {
            args: Prisma.StarRail_DrawFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarRail_DrawPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StarRail_DrawFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarRail_DrawPayload>
          }
          findMany: {
            args: Prisma.StarRail_DrawFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarRail_DrawPayload>[]
          }
          create: {
            args: Prisma.StarRail_DrawCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarRail_DrawPayload>
          }
          createMany: {
            args: Prisma.StarRail_DrawCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StarRail_DrawDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarRail_DrawPayload>
          }
          update: {
            args: Prisma.StarRail_DrawUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarRail_DrawPayload>
          }
          deleteMany: {
            args: Prisma.StarRail_DrawDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StarRail_DrawUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StarRail_DrawUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StarRail_DrawPayload>
          }
          aggregate: {
            args: Prisma.StarRail_DrawAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStarRail_Draw>
          }
          groupBy: {
            args: Prisma.StarRail_DrawGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StarRail_DrawGroupByOutputType>[]
          }
          count: {
            args: Prisma.StarRail_DrawCountArgs<ExtArgs>,
            result: $Utils.Optional<StarRail_DrawCountAggregateOutputType> | number
          }
        }
      }
      SummaryTable: {
        payload: Prisma.$SummaryTablePayload<ExtArgs>
        fields: Prisma.SummaryTableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SummaryTableFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SummaryTablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SummaryTableFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SummaryTablePayload>
          }
          findFirst: {
            args: Prisma.SummaryTableFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SummaryTablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SummaryTableFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SummaryTablePayload>
          }
          findMany: {
            args: Prisma.SummaryTableFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SummaryTablePayload>[]
          }
          create: {
            args: Prisma.SummaryTableCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SummaryTablePayload>
          }
          createMany: {
            args: Prisma.SummaryTableCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SummaryTableDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SummaryTablePayload>
          }
          update: {
            args: Prisma.SummaryTableUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SummaryTablePayload>
          }
          deleteMany: {
            args: Prisma.SummaryTableDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SummaryTableUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SummaryTableUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SummaryTablePayload>
          }
          aggregate: {
            args: Prisma.SummaryTableAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSummaryTable>
          }
          groupBy: {
            args: Prisma.SummaryTableGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SummaryTableGroupByOutputType>[]
          }
          count: {
            args: Prisma.SummaryTableCountArgs<ExtArgs>,
            result: $Utils.Optional<SummaryTableCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model API_Usage
   */

  export type AggregateAPI_Usage = {
    _count: API_UsageCountAggregateOutputType | null
    _avg: API_UsageAvgAggregateOutputType | null
    _sum: API_UsageSumAggregateOutputType | null
    _min: API_UsageMinAggregateOutputType | null
    _max: API_UsageMaxAggregateOutputType | null
  }

  export type API_UsageAvgAggregateOutputType = {
    API_Index: number | null
  }

  export type API_UsageSumAggregateOutputType = {
    API_Index: number | null
  }

  export type API_UsageMinAggregateOutputType = {
    API_Index: number | null
    API_Name: string | null
    API_Last_Used: Date | null
  }

  export type API_UsageMaxAggregateOutputType = {
    API_Index: number | null
    API_Name: string | null
    API_Last_Used: Date | null
  }

  export type API_UsageCountAggregateOutputType = {
    API_Index: number
    API_Name: number
    API_Last_Used: number
    _all: number
  }


  export type API_UsageAvgAggregateInputType = {
    API_Index?: true
  }

  export type API_UsageSumAggregateInputType = {
    API_Index?: true
  }

  export type API_UsageMinAggregateInputType = {
    API_Index?: true
    API_Name?: true
    API_Last_Used?: true
  }

  export type API_UsageMaxAggregateInputType = {
    API_Index?: true
    API_Name?: true
    API_Last_Used?: true
  }

  export type API_UsageCountAggregateInputType = {
    API_Index?: true
    API_Name?: true
    API_Last_Used?: true
    _all?: true
  }

  export type API_UsageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which API_Usage to aggregate.
     */
    where?: API_UsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of API_Usages to fetch.
     */
    orderBy?: API_UsageOrderByWithRelationInput | API_UsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: API_UsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` API_Usages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` API_Usages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned API_Usages
    **/
    _count?: true | API_UsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: API_UsageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: API_UsageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: API_UsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: API_UsageMaxAggregateInputType
  }

  export type GetAPI_UsageAggregateType<T extends API_UsageAggregateArgs> = {
        [P in keyof T & keyof AggregateAPI_Usage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAPI_Usage[P]>
      : GetScalarType<T[P], AggregateAPI_Usage[P]>
  }




  export type API_UsageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: API_UsageWhereInput
    orderBy?: API_UsageOrderByWithAggregationInput | API_UsageOrderByWithAggregationInput[]
    by: API_UsageScalarFieldEnum[] | API_UsageScalarFieldEnum
    having?: API_UsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: API_UsageCountAggregateInputType | true
    _avg?: API_UsageAvgAggregateInputType
    _sum?: API_UsageSumAggregateInputType
    _min?: API_UsageMinAggregateInputType
    _max?: API_UsageMaxAggregateInputType
  }

  export type API_UsageGroupByOutputType = {
    API_Index: number
    API_Name: string
    API_Last_Used: Date
    _count: API_UsageCountAggregateOutputType | null
    _avg: API_UsageAvgAggregateOutputType | null
    _sum: API_UsageSumAggregateOutputType | null
    _min: API_UsageMinAggregateOutputType | null
    _max: API_UsageMaxAggregateOutputType | null
  }

  type GetAPI_UsageGroupByPayload<T extends API_UsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<API_UsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof API_UsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], API_UsageGroupByOutputType[P]>
            : GetScalarType<T[P], API_UsageGroupByOutputType[P]>
        }
      >
    >


  export type API_UsageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    API_Index?: boolean
    API_Name?: boolean
    API_Last_Used?: boolean
  }, ExtArgs["result"]["aPI_Usage"]>

  export type API_UsageSelectScalar = {
    API_Index?: boolean
    API_Name?: boolean
    API_Last_Used?: boolean
  }


  export type $API_UsagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "API_Usage"
    objects: {}
    scalars: $Extensions.GetResult<{
      API_Index: number
      API_Name: string
      API_Last_Used: Date
    }, ExtArgs["result"]["aPI_Usage"]>
    composites: {}
  }


  type API_UsageGetPayload<S extends boolean | null | undefined | API_UsageDefaultArgs> = $Result.GetResult<Prisma.$API_UsagePayload, S>

  type API_UsageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<API_UsageFindManyArgs, 'select' | 'include'> & {
      select?: API_UsageCountAggregateInputType | true
    }

  export interface API_UsageDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['API_Usage'], meta: { name: 'API_Usage' } }
    /**
     * Find zero or one API_Usage that matches the filter.
     * @param {API_UsageFindUniqueArgs} args - Arguments to find a API_Usage
     * @example
     * // Get one API_Usage
     * const aPI_Usage = await prisma.aPI_Usage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends API_UsageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, API_UsageFindUniqueArgs<ExtArgs>>
    ): Prisma__API_UsageClient<$Result.GetResult<Prisma.$API_UsagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one API_Usage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {API_UsageFindUniqueOrThrowArgs} args - Arguments to find a API_Usage
     * @example
     * // Get one API_Usage
     * const aPI_Usage = await prisma.aPI_Usage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends API_UsageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, API_UsageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__API_UsageClient<$Result.GetResult<Prisma.$API_UsagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first API_Usage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {API_UsageFindFirstArgs} args - Arguments to find a API_Usage
     * @example
     * // Get one API_Usage
     * const aPI_Usage = await prisma.aPI_Usage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends API_UsageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, API_UsageFindFirstArgs<ExtArgs>>
    ): Prisma__API_UsageClient<$Result.GetResult<Prisma.$API_UsagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first API_Usage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {API_UsageFindFirstOrThrowArgs} args - Arguments to find a API_Usage
     * @example
     * // Get one API_Usage
     * const aPI_Usage = await prisma.aPI_Usage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends API_UsageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, API_UsageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__API_UsageClient<$Result.GetResult<Prisma.$API_UsagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more API_Usages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {API_UsageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all API_Usages
     * const aPI_Usages = await prisma.aPI_Usage.findMany()
     * 
     * // Get first 10 API_Usages
     * const aPI_Usages = await prisma.aPI_Usage.findMany({ take: 10 })
     * 
     * // Only select the `API_Index`
     * const aPI_UsageWithAPI_IndexOnly = await prisma.aPI_Usage.findMany({ select: { API_Index: true } })
     * 
    **/
    findMany<T extends API_UsageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, API_UsageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$API_UsagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a API_Usage.
     * @param {API_UsageCreateArgs} args - Arguments to create a API_Usage.
     * @example
     * // Create one API_Usage
     * const API_Usage = await prisma.aPI_Usage.create({
     *   data: {
     *     // ... data to create a API_Usage
     *   }
     * })
     * 
    **/
    create<T extends API_UsageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, API_UsageCreateArgs<ExtArgs>>
    ): Prisma__API_UsageClient<$Result.GetResult<Prisma.$API_UsagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many API_Usages.
     *     @param {API_UsageCreateManyArgs} args - Arguments to create many API_Usages.
     *     @example
     *     // Create many API_Usages
     *     const aPI_Usage = await prisma.aPI_Usage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends API_UsageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, API_UsageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a API_Usage.
     * @param {API_UsageDeleteArgs} args - Arguments to delete one API_Usage.
     * @example
     * // Delete one API_Usage
     * const API_Usage = await prisma.aPI_Usage.delete({
     *   where: {
     *     // ... filter to delete one API_Usage
     *   }
     * })
     * 
    **/
    delete<T extends API_UsageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, API_UsageDeleteArgs<ExtArgs>>
    ): Prisma__API_UsageClient<$Result.GetResult<Prisma.$API_UsagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one API_Usage.
     * @param {API_UsageUpdateArgs} args - Arguments to update one API_Usage.
     * @example
     * // Update one API_Usage
     * const aPI_Usage = await prisma.aPI_Usage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends API_UsageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, API_UsageUpdateArgs<ExtArgs>>
    ): Prisma__API_UsageClient<$Result.GetResult<Prisma.$API_UsagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more API_Usages.
     * @param {API_UsageDeleteManyArgs} args - Arguments to filter API_Usages to delete.
     * @example
     * // Delete a few API_Usages
     * const { count } = await prisma.aPI_Usage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends API_UsageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, API_UsageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more API_Usages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {API_UsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many API_Usages
     * const aPI_Usage = await prisma.aPI_Usage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends API_UsageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, API_UsageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one API_Usage.
     * @param {API_UsageUpsertArgs} args - Arguments to update or create a API_Usage.
     * @example
     * // Update or create a API_Usage
     * const aPI_Usage = await prisma.aPI_Usage.upsert({
     *   create: {
     *     // ... data to create a API_Usage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the API_Usage we want to update
     *   }
     * })
    **/
    upsert<T extends API_UsageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, API_UsageUpsertArgs<ExtArgs>>
    ): Prisma__API_UsageClient<$Result.GetResult<Prisma.$API_UsagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of API_Usages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {API_UsageCountArgs} args - Arguments to filter API_Usages to count.
     * @example
     * // Count the number of API_Usages
     * const count = await prisma.aPI_Usage.count({
     *   where: {
     *     // ... the filter for the API_Usages we want to count
     *   }
     * })
    **/
    count<T extends API_UsageCountArgs>(
      args?: Subset<T, API_UsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], API_UsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a API_Usage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {API_UsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends API_UsageAggregateArgs>(args: Subset<T, API_UsageAggregateArgs>): Prisma.PrismaPromise<GetAPI_UsageAggregateType<T>>

    /**
     * Group by API_Usage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {API_UsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends API_UsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: API_UsageGroupByArgs['orderBy'] }
        : { orderBy?: API_UsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, API_UsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAPI_UsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the API_Usage model
   */
  readonly fields: API_UsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for API_Usage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__API_UsageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the API_Usage model
   */ 
  interface API_UsageFieldRefs {
    readonly API_Index: FieldRef<"API_Usage", 'Int'>
    readonly API_Name: FieldRef<"API_Usage", 'String'>
    readonly API_Last_Used: FieldRef<"API_Usage", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * API_Usage findUnique
   */
  export type API_UsageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the API_Usage
     */
    select?: API_UsageSelect<ExtArgs> | null
    /**
     * Filter, which API_Usage to fetch.
     */
    where: API_UsageWhereUniqueInput
  }


  /**
   * API_Usage findUniqueOrThrow
   */
  export type API_UsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the API_Usage
     */
    select?: API_UsageSelect<ExtArgs> | null
    /**
     * Filter, which API_Usage to fetch.
     */
    where: API_UsageWhereUniqueInput
  }


  /**
   * API_Usage findFirst
   */
  export type API_UsageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the API_Usage
     */
    select?: API_UsageSelect<ExtArgs> | null
    /**
     * Filter, which API_Usage to fetch.
     */
    where?: API_UsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of API_Usages to fetch.
     */
    orderBy?: API_UsageOrderByWithRelationInput | API_UsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for API_Usages.
     */
    cursor?: API_UsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` API_Usages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` API_Usages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of API_Usages.
     */
    distinct?: API_UsageScalarFieldEnum | API_UsageScalarFieldEnum[]
  }


  /**
   * API_Usage findFirstOrThrow
   */
  export type API_UsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the API_Usage
     */
    select?: API_UsageSelect<ExtArgs> | null
    /**
     * Filter, which API_Usage to fetch.
     */
    where?: API_UsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of API_Usages to fetch.
     */
    orderBy?: API_UsageOrderByWithRelationInput | API_UsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for API_Usages.
     */
    cursor?: API_UsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` API_Usages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` API_Usages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of API_Usages.
     */
    distinct?: API_UsageScalarFieldEnum | API_UsageScalarFieldEnum[]
  }


  /**
   * API_Usage findMany
   */
  export type API_UsageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the API_Usage
     */
    select?: API_UsageSelect<ExtArgs> | null
    /**
     * Filter, which API_Usages to fetch.
     */
    where?: API_UsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of API_Usages to fetch.
     */
    orderBy?: API_UsageOrderByWithRelationInput | API_UsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing API_Usages.
     */
    cursor?: API_UsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` API_Usages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` API_Usages.
     */
    skip?: number
    distinct?: API_UsageScalarFieldEnum | API_UsageScalarFieldEnum[]
  }


  /**
   * API_Usage create
   */
  export type API_UsageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the API_Usage
     */
    select?: API_UsageSelect<ExtArgs> | null
    /**
     * The data needed to create a API_Usage.
     */
    data: XOR<API_UsageCreateInput, API_UsageUncheckedCreateInput>
  }


  /**
   * API_Usage createMany
   */
  export type API_UsageCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many API_Usages.
     */
    data: API_UsageCreateManyInput | API_UsageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * API_Usage update
   */
  export type API_UsageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the API_Usage
     */
    select?: API_UsageSelect<ExtArgs> | null
    /**
     * The data needed to update a API_Usage.
     */
    data: XOR<API_UsageUpdateInput, API_UsageUncheckedUpdateInput>
    /**
     * Choose, which API_Usage to update.
     */
    where: API_UsageWhereUniqueInput
  }


  /**
   * API_Usage updateMany
   */
  export type API_UsageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update API_Usages.
     */
    data: XOR<API_UsageUpdateManyMutationInput, API_UsageUncheckedUpdateManyInput>
    /**
     * Filter which API_Usages to update
     */
    where?: API_UsageWhereInput
  }


  /**
   * API_Usage upsert
   */
  export type API_UsageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the API_Usage
     */
    select?: API_UsageSelect<ExtArgs> | null
    /**
     * The filter to search for the API_Usage to update in case it exists.
     */
    where: API_UsageWhereUniqueInput
    /**
     * In case the API_Usage found by the `where` argument doesn't exist, create a new API_Usage with this data.
     */
    create: XOR<API_UsageCreateInput, API_UsageUncheckedCreateInput>
    /**
     * In case the API_Usage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<API_UsageUpdateInput, API_UsageUncheckedUpdateInput>
  }


  /**
   * API_Usage delete
   */
  export type API_UsageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the API_Usage
     */
    select?: API_UsageSelect<ExtArgs> | null
    /**
     * Filter which API_Usage to delete.
     */
    where: API_UsageWhereUniqueInput
  }


  /**
   * API_Usage deleteMany
   */
  export type API_UsageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which API_Usages to delete
     */
    where?: API_UsageWhereInput
  }


  /**
   * API_Usage without action
   */
  export type API_UsageDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the API_Usage
     */
    select?: API_UsageSelect<ExtArgs> | null
  }



  /**
   * Model Banners
   */

  export type AggregateBanners = {
    _count: BannersCountAggregateOutputType | null
    _avg: BannersAvgAggregateOutputType | null
    _sum: BannersSumAggregateOutputType | null
    _min: BannersMinAggregateOutputType | null
    _max: BannersMaxAggregateOutputType | null
  }

  export type BannersAvgAggregateOutputType = {
    Banner_Index: number | null
    Game_ID: number | null
  }

  export type BannersSumAggregateOutputType = {
    Banner_Index: number | null
    Game_ID: number | null
  }

  export type BannersMinAggregateOutputType = {
    Banner_Index: number | null
    Game_ID: number | null
    Banner_Path: string | null
    Banner_Start: Date | null
    Banner_End: Date | null
    Banner_RateUps: string | null
  }

  export type BannersMaxAggregateOutputType = {
    Banner_Index: number | null
    Game_ID: number | null
    Banner_Path: string | null
    Banner_Start: Date | null
    Banner_End: Date | null
    Banner_RateUps: string | null
  }

  export type BannersCountAggregateOutputType = {
    Banner_Index: number
    Game_ID: number
    Banner_Path: number
    Banner_Start: number
    Banner_End: number
    Banner_RateUps: number
    _all: number
  }


  export type BannersAvgAggregateInputType = {
    Banner_Index?: true
    Game_ID?: true
  }

  export type BannersSumAggregateInputType = {
    Banner_Index?: true
    Game_ID?: true
  }

  export type BannersMinAggregateInputType = {
    Banner_Index?: true
    Game_ID?: true
    Banner_Path?: true
    Banner_Start?: true
    Banner_End?: true
    Banner_RateUps?: true
  }

  export type BannersMaxAggregateInputType = {
    Banner_Index?: true
    Game_ID?: true
    Banner_Path?: true
    Banner_Start?: true
    Banner_End?: true
    Banner_RateUps?: true
  }

  export type BannersCountAggregateInputType = {
    Banner_Index?: true
    Game_ID?: true
    Banner_Path?: true
    Banner_Start?: true
    Banner_End?: true
    Banner_RateUps?: true
    _all?: true
  }

  export type BannersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Banners to aggregate.
     */
    where?: BannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banners to fetch.
     */
    orderBy?: BannersOrderByWithRelationInput | BannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Banners
    **/
    _count?: true | BannersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BannersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BannersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BannersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BannersMaxAggregateInputType
  }

  export type GetBannersAggregateType<T extends BannersAggregateArgs> = {
        [P in keyof T & keyof AggregateBanners]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBanners[P]>
      : GetScalarType<T[P], AggregateBanners[P]>
  }




  export type BannersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BannersWhereInput
    orderBy?: BannersOrderByWithAggregationInput | BannersOrderByWithAggregationInput[]
    by: BannersScalarFieldEnum[] | BannersScalarFieldEnum
    having?: BannersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BannersCountAggregateInputType | true
    _avg?: BannersAvgAggregateInputType
    _sum?: BannersSumAggregateInputType
    _min?: BannersMinAggregateInputType
    _max?: BannersMaxAggregateInputType
  }

  export type BannersGroupByOutputType = {
    Banner_Index: number
    Game_ID: number
    Banner_Path: string
    Banner_Start: Date
    Banner_End: Date | null
    Banner_RateUps: string
    _count: BannersCountAggregateOutputType | null
    _avg: BannersAvgAggregateOutputType | null
    _sum: BannersSumAggregateOutputType | null
    _min: BannersMinAggregateOutputType | null
    _max: BannersMaxAggregateOutputType | null
  }

  type GetBannersGroupByPayload<T extends BannersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BannersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BannersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BannersGroupByOutputType[P]>
            : GetScalarType<T[P], BannersGroupByOutputType[P]>
        }
      >
    >


  export type BannersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Banner_Index?: boolean
    Game_ID?: boolean
    Banner_Path?: boolean
    Banner_Start?: boolean
    Banner_End?: boolean
    Banner_RateUps?: boolean
  }, ExtArgs["result"]["banners"]>

  export type BannersSelectScalar = {
    Banner_Index?: boolean
    Game_ID?: boolean
    Banner_Path?: boolean
    Banner_Start?: boolean
    Banner_End?: boolean
    Banner_RateUps?: boolean
  }


  export type $BannersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Banners"
    objects: {}
    scalars: $Extensions.GetResult<{
      Banner_Index: number
      Game_ID: number
      Banner_Path: string
      Banner_Start: Date
      Banner_End: Date | null
      Banner_RateUps: string
    }, ExtArgs["result"]["banners"]>
    composites: {}
  }


  type BannersGetPayload<S extends boolean | null | undefined | BannersDefaultArgs> = $Result.GetResult<Prisma.$BannersPayload, S>

  type BannersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<BannersFindManyArgs, 'select' | 'include'> & {
      select?: BannersCountAggregateInputType | true
    }

  export interface BannersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Banners'], meta: { name: 'Banners' } }
    /**
     * Find zero or one Banners that matches the filter.
     * @param {BannersFindUniqueArgs} args - Arguments to find a Banners
     * @example
     * // Get one Banners
     * const banners = await prisma.banners.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BannersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BannersFindUniqueArgs<ExtArgs>>
    ): Prisma__BannersClient<$Result.GetResult<Prisma.$BannersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Banners that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BannersFindUniqueOrThrowArgs} args - Arguments to find a Banners
     * @example
     * // Get one Banners
     * const banners = await prisma.banners.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BannersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BannersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BannersClient<$Result.GetResult<Prisma.$BannersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Banners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannersFindFirstArgs} args - Arguments to find a Banners
     * @example
     * // Get one Banners
     * const banners = await prisma.banners.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BannersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BannersFindFirstArgs<ExtArgs>>
    ): Prisma__BannersClient<$Result.GetResult<Prisma.$BannersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Banners that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannersFindFirstOrThrowArgs} args - Arguments to find a Banners
     * @example
     * // Get one Banners
     * const banners = await prisma.banners.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BannersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BannersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BannersClient<$Result.GetResult<Prisma.$BannersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Banners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Banners
     * const banners = await prisma.banners.findMany()
     * 
     * // Get first 10 Banners
     * const banners = await prisma.banners.findMany({ take: 10 })
     * 
     * // Only select the `Banner_Index`
     * const bannersWithBanner_IndexOnly = await prisma.banners.findMany({ select: { Banner_Index: true } })
     * 
    **/
    findMany<T extends BannersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BannersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BannersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Banners.
     * @param {BannersCreateArgs} args - Arguments to create a Banners.
     * @example
     * // Create one Banners
     * const Banners = await prisma.banners.create({
     *   data: {
     *     // ... data to create a Banners
     *   }
     * })
     * 
    **/
    create<T extends BannersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BannersCreateArgs<ExtArgs>>
    ): Prisma__BannersClient<$Result.GetResult<Prisma.$BannersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Banners.
     *     @param {BannersCreateManyArgs} args - Arguments to create many Banners.
     *     @example
     *     // Create many Banners
     *     const banners = await prisma.banners.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BannersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BannersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Banners.
     * @param {BannersDeleteArgs} args - Arguments to delete one Banners.
     * @example
     * // Delete one Banners
     * const Banners = await prisma.banners.delete({
     *   where: {
     *     // ... filter to delete one Banners
     *   }
     * })
     * 
    **/
    delete<T extends BannersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BannersDeleteArgs<ExtArgs>>
    ): Prisma__BannersClient<$Result.GetResult<Prisma.$BannersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Banners.
     * @param {BannersUpdateArgs} args - Arguments to update one Banners.
     * @example
     * // Update one Banners
     * const banners = await prisma.banners.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BannersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BannersUpdateArgs<ExtArgs>>
    ): Prisma__BannersClient<$Result.GetResult<Prisma.$BannersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Banners.
     * @param {BannersDeleteManyArgs} args - Arguments to filter Banners to delete.
     * @example
     * // Delete a few Banners
     * const { count } = await prisma.banners.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BannersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BannersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Banners
     * const banners = await prisma.banners.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BannersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BannersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Banners.
     * @param {BannersUpsertArgs} args - Arguments to update or create a Banners.
     * @example
     * // Update or create a Banners
     * const banners = await prisma.banners.upsert({
     *   create: {
     *     // ... data to create a Banners
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Banners we want to update
     *   }
     * })
    **/
    upsert<T extends BannersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BannersUpsertArgs<ExtArgs>>
    ): Prisma__BannersClient<$Result.GetResult<Prisma.$BannersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannersCountArgs} args - Arguments to filter Banners to count.
     * @example
     * // Count the number of Banners
     * const count = await prisma.banners.count({
     *   where: {
     *     // ... the filter for the Banners we want to count
     *   }
     * })
    **/
    count<T extends BannersCountArgs>(
      args?: Subset<T, BannersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BannersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BannersAggregateArgs>(args: Subset<T, BannersAggregateArgs>): Prisma.PrismaPromise<GetBannersAggregateType<T>>

    /**
     * Group by Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BannersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BannersGroupByArgs['orderBy'] }
        : { orderBy?: BannersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BannersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBannersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Banners model
   */
  readonly fields: BannersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Banners.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BannersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Banners model
   */ 
  interface BannersFieldRefs {
    readonly Banner_Index: FieldRef<"Banners", 'Int'>
    readonly Game_ID: FieldRef<"Banners", 'Int'>
    readonly Banner_Path: FieldRef<"Banners", 'String'>
    readonly Banner_Start: FieldRef<"Banners", 'DateTime'>
    readonly Banner_End: FieldRef<"Banners", 'DateTime'>
    readonly Banner_RateUps: FieldRef<"Banners", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Banners findUnique
   */
  export type BannersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banners
     */
    select?: BannersSelect<ExtArgs> | null
    /**
     * Filter, which Banners to fetch.
     */
    where: BannersWhereUniqueInput
  }


  /**
   * Banners findUniqueOrThrow
   */
  export type BannersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banners
     */
    select?: BannersSelect<ExtArgs> | null
    /**
     * Filter, which Banners to fetch.
     */
    where: BannersWhereUniqueInput
  }


  /**
   * Banners findFirst
   */
  export type BannersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banners
     */
    select?: BannersSelect<ExtArgs> | null
    /**
     * Filter, which Banners to fetch.
     */
    where?: BannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banners to fetch.
     */
    orderBy?: BannersOrderByWithRelationInput | BannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Banners.
     */
    cursor?: BannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Banners.
     */
    distinct?: BannersScalarFieldEnum | BannersScalarFieldEnum[]
  }


  /**
   * Banners findFirstOrThrow
   */
  export type BannersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banners
     */
    select?: BannersSelect<ExtArgs> | null
    /**
     * Filter, which Banners to fetch.
     */
    where?: BannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banners to fetch.
     */
    orderBy?: BannersOrderByWithRelationInput | BannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Banners.
     */
    cursor?: BannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Banners.
     */
    distinct?: BannersScalarFieldEnum | BannersScalarFieldEnum[]
  }


  /**
   * Banners findMany
   */
  export type BannersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banners
     */
    select?: BannersSelect<ExtArgs> | null
    /**
     * Filter, which Banners to fetch.
     */
    where?: BannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banners to fetch.
     */
    orderBy?: BannersOrderByWithRelationInput | BannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Banners.
     */
    cursor?: BannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banners.
     */
    skip?: number
    distinct?: BannersScalarFieldEnum | BannersScalarFieldEnum[]
  }


  /**
   * Banners create
   */
  export type BannersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banners
     */
    select?: BannersSelect<ExtArgs> | null
    /**
     * The data needed to create a Banners.
     */
    data: XOR<BannersCreateInput, BannersUncheckedCreateInput>
  }


  /**
   * Banners createMany
   */
  export type BannersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Banners.
     */
    data: BannersCreateManyInput | BannersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Banners update
   */
  export type BannersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banners
     */
    select?: BannersSelect<ExtArgs> | null
    /**
     * The data needed to update a Banners.
     */
    data: XOR<BannersUpdateInput, BannersUncheckedUpdateInput>
    /**
     * Choose, which Banners to update.
     */
    where: BannersWhereUniqueInput
  }


  /**
   * Banners updateMany
   */
  export type BannersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Banners.
     */
    data: XOR<BannersUpdateManyMutationInput, BannersUncheckedUpdateManyInput>
    /**
     * Filter which Banners to update
     */
    where?: BannersWhereInput
  }


  /**
   * Banners upsert
   */
  export type BannersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banners
     */
    select?: BannersSelect<ExtArgs> | null
    /**
     * The filter to search for the Banners to update in case it exists.
     */
    where: BannersWhereUniqueInput
    /**
     * In case the Banners found by the `where` argument doesn't exist, create a new Banners with this data.
     */
    create: XOR<BannersCreateInput, BannersUncheckedCreateInput>
    /**
     * In case the Banners was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BannersUpdateInput, BannersUncheckedUpdateInput>
  }


  /**
   * Banners delete
   */
  export type BannersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banners
     */
    select?: BannersSelect<ExtArgs> | null
    /**
     * Filter which Banners to delete.
     */
    where: BannersWhereUniqueInput
  }


  /**
   * Banners deleteMany
   */
  export type BannersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Banners to delete
     */
    where?: BannersWhereInput
  }


  /**
   * Banners without action
   */
  export type BannersDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banners
     */
    select?: BannersSelect<ExtArgs> | null
  }



  /**
   * Model Character_Birthdays
   */

  export type AggregateCharacter_Birthdays = {
    _count: Character_BirthdaysCountAggregateOutputType | null
    _avg: Character_BirthdaysAvgAggregateOutputType | null
    _sum: Character_BirthdaysSumAggregateOutputType | null
    _min: Character_BirthdaysMinAggregateOutputType | null
    _max: Character_BirthdaysMaxAggregateOutputType | null
  }

  export type Character_BirthdaysAvgAggregateOutputType = {
    Character_Index: number | null
    Game_ID: number | null
  }

  export type Character_BirthdaysSumAggregateOutputType = {
    Character_Index: number | null
    Game_ID: number | null
  }

  export type Character_BirthdaysMinAggregateOutputType = {
    Character_Index: number | null
    Game_ID: number | null
    Character_Name: string | null
    Character_Birthday: Date | null
  }

  export type Character_BirthdaysMaxAggregateOutputType = {
    Character_Index: number | null
    Game_ID: number | null
    Character_Name: string | null
    Character_Birthday: Date | null
  }

  export type Character_BirthdaysCountAggregateOutputType = {
    Character_Index: number
    Game_ID: number
    Character_Name: number
    Character_Birthday: number
    _all: number
  }


  export type Character_BirthdaysAvgAggregateInputType = {
    Character_Index?: true
    Game_ID?: true
  }

  export type Character_BirthdaysSumAggregateInputType = {
    Character_Index?: true
    Game_ID?: true
  }

  export type Character_BirthdaysMinAggregateInputType = {
    Character_Index?: true
    Game_ID?: true
    Character_Name?: true
    Character_Birthday?: true
  }

  export type Character_BirthdaysMaxAggregateInputType = {
    Character_Index?: true
    Game_ID?: true
    Character_Name?: true
    Character_Birthday?: true
  }

  export type Character_BirthdaysCountAggregateInputType = {
    Character_Index?: true
    Game_ID?: true
    Character_Name?: true
    Character_Birthday?: true
    _all?: true
  }

  export type Character_BirthdaysAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Character_Birthdays to aggregate.
     */
    where?: Character_BirthdaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Character_Birthdays to fetch.
     */
    orderBy?: Character_BirthdaysOrderByWithRelationInput | Character_BirthdaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Character_BirthdaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Character_Birthdays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Character_Birthdays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Character_Birthdays
    **/
    _count?: true | Character_BirthdaysCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Character_BirthdaysAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Character_BirthdaysSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Character_BirthdaysMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Character_BirthdaysMaxAggregateInputType
  }

  export type GetCharacter_BirthdaysAggregateType<T extends Character_BirthdaysAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacter_Birthdays]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacter_Birthdays[P]>
      : GetScalarType<T[P], AggregateCharacter_Birthdays[P]>
  }




  export type Character_BirthdaysGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Character_BirthdaysWhereInput
    orderBy?: Character_BirthdaysOrderByWithAggregationInput | Character_BirthdaysOrderByWithAggregationInput[]
    by: Character_BirthdaysScalarFieldEnum[] | Character_BirthdaysScalarFieldEnum
    having?: Character_BirthdaysScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Character_BirthdaysCountAggregateInputType | true
    _avg?: Character_BirthdaysAvgAggregateInputType
    _sum?: Character_BirthdaysSumAggregateInputType
    _min?: Character_BirthdaysMinAggregateInputType
    _max?: Character_BirthdaysMaxAggregateInputType
  }

  export type Character_BirthdaysGroupByOutputType = {
    Character_Index: number
    Game_ID: number
    Character_Name: string
    Character_Birthday: Date
    _count: Character_BirthdaysCountAggregateOutputType | null
    _avg: Character_BirthdaysAvgAggregateOutputType | null
    _sum: Character_BirthdaysSumAggregateOutputType | null
    _min: Character_BirthdaysMinAggregateOutputType | null
    _max: Character_BirthdaysMaxAggregateOutputType | null
  }

  type GetCharacter_BirthdaysGroupByPayload<T extends Character_BirthdaysGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Character_BirthdaysGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Character_BirthdaysGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Character_BirthdaysGroupByOutputType[P]>
            : GetScalarType<T[P], Character_BirthdaysGroupByOutputType[P]>
        }
      >
    >


  export type Character_BirthdaysSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Character_Index?: boolean
    Game_ID?: boolean
    Character_Name?: boolean
    Character_Birthday?: boolean
  }, ExtArgs["result"]["character_Birthdays"]>

  export type Character_BirthdaysSelectScalar = {
    Character_Index?: boolean
    Game_ID?: boolean
    Character_Name?: boolean
    Character_Birthday?: boolean
  }


  export type $Character_BirthdaysPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Character_Birthdays"
    objects: {}
    scalars: $Extensions.GetResult<{
      Character_Index: number
      Game_ID: number
      Character_Name: string
      Character_Birthday: Date
    }, ExtArgs["result"]["character_Birthdays"]>
    composites: {}
  }


  type Character_BirthdaysGetPayload<S extends boolean | null | undefined | Character_BirthdaysDefaultArgs> = $Result.GetResult<Prisma.$Character_BirthdaysPayload, S>

  type Character_BirthdaysCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Character_BirthdaysFindManyArgs, 'select' | 'include'> & {
      select?: Character_BirthdaysCountAggregateInputType | true
    }

  export interface Character_BirthdaysDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Character_Birthdays'], meta: { name: 'Character_Birthdays' } }
    /**
     * Find zero or one Character_Birthdays that matches the filter.
     * @param {Character_BirthdaysFindUniqueArgs} args - Arguments to find a Character_Birthdays
     * @example
     * // Get one Character_Birthdays
     * const character_Birthdays = await prisma.character_Birthdays.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Character_BirthdaysFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Character_BirthdaysFindUniqueArgs<ExtArgs>>
    ): Prisma__Character_BirthdaysClient<$Result.GetResult<Prisma.$Character_BirthdaysPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Character_Birthdays that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Character_BirthdaysFindUniqueOrThrowArgs} args - Arguments to find a Character_Birthdays
     * @example
     * // Get one Character_Birthdays
     * const character_Birthdays = await prisma.character_Birthdays.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Character_BirthdaysFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_BirthdaysFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Character_BirthdaysClient<$Result.GetResult<Prisma.$Character_BirthdaysPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Character_Birthdays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_BirthdaysFindFirstArgs} args - Arguments to find a Character_Birthdays
     * @example
     * // Get one Character_Birthdays
     * const character_Birthdays = await prisma.character_Birthdays.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Character_BirthdaysFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_BirthdaysFindFirstArgs<ExtArgs>>
    ): Prisma__Character_BirthdaysClient<$Result.GetResult<Prisma.$Character_BirthdaysPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Character_Birthdays that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_BirthdaysFindFirstOrThrowArgs} args - Arguments to find a Character_Birthdays
     * @example
     * // Get one Character_Birthdays
     * const character_Birthdays = await prisma.character_Birthdays.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Character_BirthdaysFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_BirthdaysFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Character_BirthdaysClient<$Result.GetResult<Prisma.$Character_BirthdaysPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Character_Birthdays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_BirthdaysFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Character_Birthdays
     * const character_Birthdays = await prisma.character_Birthdays.findMany()
     * 
     * // Get first 10 Character_Birthdays
     * const character_Birthdays = await prisma.character_Birthdays.findMany({ take: 10 })
     * 
     * // Only select the `Character_Index`
     * const character_BirthdaysWithCharacter_IndexOnly = await prisma.character_Birthdays.findMany({ select: { Character_Index: true } })
     * 
    **/
    findMany<T extends Character_BirthdaysFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_BirthdaysFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Character_BirthdaysPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Character_Birthdays.
     * @param {Character_BirthdaysCreateArgs} args - Arguments to create a Character_Birthdays.
     * @example
     * // Create one Character_Birthdays
     * const Character_Birthdays = await prisma.character_Birthdays.create({
     *   data: {
     *     // ... data to create a Character_Birthdays
     *   }
     * })
     * 
    **/
    create<T extends Character_BirthdaysCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Character_BirthdaysCreateArgs<ExtArgs>>
    ): Prisma__Character_BirthdaysClient<$Result.GetResult<Prisma.$Character_BirthdaysPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Character_Birthdays.
     *     @param {Character_BirthdaysCreateManyArgs} args - Arguments to create many Character_Birthdays.
     *     @example
     *     // Create many Character_Birthdays
     *     const character_Birthdays = await prisma.character_Birthdays.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Character_BirthdaysCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_BirthdaysCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Character_Birthdays.
     * @param {Character_BirthdaysDeleteArgs} args - Arguments to delete one Character_Birthdays.
     * @example
     * // Delete one Character_Birthdays
     * const Character_Birthdays = await prisma.character_Birthdays.delete({
     *   where: {
     *     // ... filter to delete one Character_Birthdays
     *   }
     * })
     * 
    **/
    delete<T extends Character_BirthdaysDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Character_BirthdaysDeleteArgs<ExtArgs>>
    ): Prisma__Character_BirthdaysClient<$Result.GetResult<Prisma.$Character_BirthdaysPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Character_Birthdays.
     * @param {Character_BirthdaysUpdateArgs} args - Arguments to update one Character_Birthdays.
     * @example
     * // Update one Character_Birthdays
     * const character_Birthdays = await prisma.character_Birthdays.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Character_BirthdaysUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Character_BirthdaysUpdateArgs<ExtArgs>>
    ): Prisma__Character_BirthdaysClient<$Result.GetResult<Prisma.$Character_BirthdaysPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Character_Birthdays.
     * @param {Character_BirthdaysDeleteManyArgs} args - Arguments to filter Character_Birthdays to delete.
     * @example
     * // Delete a few Character_Birthdays
     * const { count } = await prisma.character_Birthdays.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Character_BirthdaysDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_BirthdaysDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Character_Birthdays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_BirthdaysUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Character_Birthdays
     * const character_Birthdays = await prisma.character_Birthdays.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Character_BirthdaysUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Character_BirthdaysUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Character_Birthdays.
     * @param {Character_BirthdaysUpsertArgs} args - Arguments to update or create a Character_Birthdays.
     * @example
     * // Update or create a Character_Birthdays
     * const character_Birthdays = await prisma.character_Birthdays.upsert({
     *   create: {
     *     // ... data to create a Character_Birthdays
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Character_Birthdays we want to update
     *   }
     * })
    **/
    upsert<T extends Character_BirthdaysUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Character_BirthdaysUpsertArgs<ExtArgs>>
    ): Prisma__Character_BirthdaysClient<$Result.GetResult<Prisma.$Character_BirthdaysPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Character_Birthdays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_BirthdaysCountArgs} args - Arguments to filter Character_Birthdays to count.
     * @example
     * // Count the number of Character_Birthdays
     * const count = await prisma.character_Birthdays.count({
     *   where: {
     *     // ... the filter for the Character_Birthdays we want to count
     *   }
     * })
    **/
    count<T extends Character_BirthdaysCountArgs>(
      args?: Subset<T, Character_BirthdaysCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Character_BirthdaysCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Character_Birthdays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_BirthdaysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Character_BirthdaysAggregateArgs>(args: Subset<T, Character_BirthdaysAggregateArgs>): Prisma.PrismaPromise<GetCharacter_BirthdaysAggregateType<T>>

    /**
     * Group by Character_Birthdays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_BirthdaysGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Character_BirthdaysGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Character_BirthdaysGroupByArgs['orderBy'] }
        : { orderBy?: Character_BirthdaysGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Character_BirthdaysGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacter_BirthdaysGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Character_Birthdays model
   */
  readonly fields: Character_BirthdaysFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Character_Birthdays.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Character_BirthdaysClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Character_Birthdays model
   */ 
  interface Character_BirthdaysFieldRefs {
    readonly Character_Index: FieldRef<"Character_Birthdays", 'Int'>
    readonly Game_ID: FieldRef<"Character_Birthdays", 'Int'>
    readonly Character_Name: FieldRef<"Character_Birthdays", 'String'>
    readonly Character_Birthday: FieldRef<"Character_Birthdays", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Character_Birthdays findUnique
   */
  export type Character_BirthdaysFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Birthdays
     */
    select?: Character_BirthdaysSelect<ExtArgs> | null
    /**
     * Filter, which Character_Birthdays to fetch.
     */
    where: Character_BirthdaysWhereUniqueInput
  }


  /**
   * Character_Birthdays findUniqueOrThrow
   */
  export type Character_BirthdaysFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Birthdays
     */
    select?: Character_BirthdaysSelect<ExtArgs> | null
    /**
     * Filter, which Character_Birthdays to fetch.
     */
    where: Character_BirthdaysWhereUniqueInput
  }


  /**
   * Character_Birthdays findFirst
   */
  export type Character_BirthdaysFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Birthdays
     */
    select?: Character_BirthdaysSelect<ExtArgs> | null
    /**
     * Filter, which Character_Birthdays to fetch.
     */
    where?: Character_BirthdaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Character_Birthdays to fetch.
     */
    orderBy?: Character_BirthdaysOrderByWithRelationInput | Character_BirthdaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Character_Birthdays.
     */
    cursor?: Character_BirthdaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Character_Birthdays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Character_Birthdays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Character_Birthdays.
     */
    distinct?: Character_BirthdaysScalarFieldEnum | Character_BirthdaysScalarFieldEnum[]
  }


  /**
   * Character_Birthdays findFirstOrThrow
   */
  export type Character_BirthdaysFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Birthdays
     */
    select?: Character_BirthdaysSelect<ExtArgs> | null
    /**
     * Filter, which Character_Birthdays to fetch.
     */
    where?: Character_BirthdaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Character_Birthdays to fetch.
     */
    orderBy?: Character_BirthdaysOrderByWithRelationInput | Character_BirthdaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Character_Birthdays.
     */
    cursor?: Character_BirthdaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Character_Birthdays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Character_Birthdays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Character_Birthdays.
     */
    distinct?: Character_BirthdaysScalarFieldEnum | Character_BirthdaysScalarFieldEnum[]
  }


  /**
   * Character_Birthdays findMany
   */
  export type Character_BirthdaysFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Birthdays
     */
    select?: Character_BirthdaysSelect<ExtArgs> | null
    /**
     * Filter, which Character_Birthdays to fetch.
     */
    where?: Character_BirthdaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Character_Birthdays to fetch.
     */
    orderBy?: Character_BirthdaysOrderByWithRelationInput | Character_BirthdaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Character_Birthdays.
     */
    cursor?: Character_BirthdaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Character_Birthdays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Character_Birthdays.
     */
    skip?: number
    distinct?: Character_BirthdaysScalarFieldEnum | Character_BirthdaysScalarFieldEnum[]
  }


  /**
   * Character_Birthdays create
   */
  export type Character_BirthdaysCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Birthdays
     */
    select?: Character_BirthdaysSelect<ExtArgs> | null
    /**
     * The data needed to create a Character_Birthdays.
     */
    data: XOR<Character_BirthdaysCreateInput, Character_BirthdaysUncheckedCreateInput>
  }


  /**
   * Character_Birthdays createMany
   */
  export type Character_BirthdaysCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Character_Birthdays.
     */
    data: Character_BirthdaysCreateManyInput | Character_BirthdaysCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Character_Birthdays update
   */
  export type Character_BirthdaysUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Birthdays
     */
    select?: Character_BirthdaysSelect<ExtArgs> | null
    /**
     * The data needed to update a Character_Birthdays.
     */
    data: XOR<Character_BirthdaysUpdateInput, Character_BirthdaysUncheckedUpdateInput>
    /**
     * Choose, which Character_Birthdays to update.
     */
    where: Character_BirthdaysWhereUniqueInput
  }


  /**
   * Character_Birthdays updateMany
   */
  export type Character_BirthdaysUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Character_Birthdays.
     */
    data: XOR<Character_BirthdaysUpdateManyMutationInput, Character_BirthdaysUncheckedUpdateManyInput>
    /**
     * Filter which Character_Birthdays to update
     */
    where?: Character_BirthdaysWhereInput
  }


  /**
   * Character_Birthdays upsert
   */
  export type Character_BirthdaysUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Birthdays
     */
    select?: Character_BirthdaysSelect<ExtArgs> | null
    /**
     * The filter to search for the Character_Birthdays to update in case it exists.
     */
    where: Character_BirthdaysWhereUniqueInput
    /**
     * In case the Character_Birthdays found by the `where` argument doesn't exist, create a new Character_Birthdays with this data.
     */
    create: XOR<Character_BirthdaysCreateInput, Character_BirthdaysUncheckedCreateInput>
    /**
     * In case the Character_Birthdays was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Character_BirthdaysUpdateInput, Character_BirthdaysUncheckedUpdateInput>
  }


  /**
   * Character_Birthdays delete
   */
  export type Character_BirthdaysDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Birthdays
     */
    select?: Character_BirthdaysSelect<ExtArgs> | null
    /**
     * Filter which Character_Birthdays to delete.
     */
    where: Character_BirthdaysWhereUniqueInput
  }


  /**
   * Character_Birthdays deleteMany
   */
  export type Character_BirthdaysDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Character_Birthdays to delete
     */
    where?: Character_BirthdaysWhereInput
  }


  /**
   * Character_Birthdays without action
   */
  export type Character_BirthdaysDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Birthdays
     */
    select?: Character_BirthdaysSelect<ExtArgs> | null
  }



  /**
   * Model Codes
   */

  export type AggregateCodes = {
    _count: CodesCountAggregateOutputType | null
    _avg: CodesAvgAggregateOutputType | null
    _sum: CodesSumAggregateOutputType | null
    _min: CodesMinAggregateOutputType | null
    _max: CodesMaxAggregateOutputType | null
  }

  export type CodesAvgAggregateOutputType = {
    Code_Index: number | null
    Game_ID: number | null
  }

  export type CodesSumAggregateOutputType = {
    Code_Index: number | null
    Game_ID: number | null
  }

  export type CodesMinAggregateOutputType = {
    Code_Index: number | null
    Game_ID: number | null
    Code_Code: string | null
    Code_Rewards: string | null
    Code_End: Date | null
  }

  export type CodesMaxAggregateOutputType = {
    Code_Index: number | null
    Game_ID: number | null
    Code_Code: string | null
    Code_Rewards: string | null
    Code_End: Date | null
  }

  export type CodesCountAggregateOutputType = {
    Code_Index: number
    Game_ID: number
    Code_Code: number
    Code_Rewards: number
    Code_End: number
    _all: number
  }


  export type CodesAvgAggregateInputType = {
    Code_Index?: true
    Game_ID?: true
  }

  export type CodesSumAggregateInputType = {
    Code_Index?: true
    Game_ID?: true
  }

  export type CodesMinAggregateInputType = {
    Code_Index?: true
    Game_ID?: true
    Code_Code?: true
    Code_Rewards?: true
    Code_End?: true
  }

  export type CodesMaxAggregateInputType = {
    Code_Index?: true
    Game_ID?: true
    Code_Code?: true
    Code_Rewards?: true
    Code_End?: true
  }

  export type CodesCountAggregateInputType = {
    Code_Index?: true
    Game_ID?: true
    Code_Code?: true
    Code_Rewards?: true
    Code_End?: true
    _all?: true
  }

  export type CodesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Codes to aggregate.
     */
    where?: CodesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Codes to fetch.
     */
    orderBy?: CodesOrderByWithRelationInput | CodesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CodesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Codes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Codes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Codes
    **/
    _count?: true | CodesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CodesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CodesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CodesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CodesMaxAggregateInputType
  }

  export type GetCodesAggregateType<T extends CodesAggregateArgs> = {
        [P in keyof T & keyof AggregateCodes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCodes[P]>
      : GetScalarType<T[P], AggregateCodes[P]>
  }




  export type CodesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CodesWhereInput
    orderBy?: CodesOrderByWithAggregationInput | CodesOrderByWithAggregationInput[]
    by: CodesScalarFieldEnum[] | CodesScalarFieldEnum
    having?: CodesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CodesCountAggregateInputType | true
    _avg?: CodesAvgAggregateInputType
    _sum?: CodesSumAggregateInputType
    _min?: CodesMinAggregateInputType
    _max?: CodesMaxAggregateInputType
  }

  export type CodesGroupByOutputType = {
    Code_Index: number
    Game_ID: number
    Code_Code: string
    Code_Rewards: string
    Code_End: Date | null
    _count: CodesCountAggregateOutputType | null
    _avg: CodesAvgAggregateOutputType | null
    _sum: CodesSumAggregateOutputType | null
    _min: CodesMinAggregateOutputType | null
    _max: CodesMaxAggregateOutputType | null
  }

  type GetCodesGroupByPayload<T extends CodesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CodesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CodesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CodesGroupByOutputType[P]>
            : GetScalarType<T[P], CodesGroupByOutputType[P]>
        }
      >
    >


  export type CodesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Code_Index?: boolean
    Game_ID?: boolean
    Code_Code?: boolean
    Code_Rewards?: boolean
    Code_End?: boolean
  }, ExtArgs["result"]["codes"]>

  export type CodesSelectScalar = {
    Code_Index?: boolean
    Game_ID?: boolean
    Code_Code?: boolean
    Code_Rewards?: boolean
    Code_End?: boolean
  }


  export type $CodesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Codes"
    objects: {}
    scalars: $Extensions.GetResult<{
      Code_Index: number
      Game_ID: number
      Code_Code: string
      Code_Rewards: string
      Code_End: Date | null
    }, ExtArgs["result"]["codes"]>
    composites: {}
  }


  type CodesGetPayload<S extends boolean | null | undefined | CodesDefaultArgs> = $Result.GetResult<Prisma.$CodesPayload, S>

  type CodesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CodesFindManyArgs, 'select' | 'include'> & {
      select?: CodesCountAggregateInputType | true
    }

  export interface CodesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Codes'], meta: { name: 'Codes' } }
    /**
     * Find zero or one Codes that matches the filter.
     * @param {CodesFindUniqueArgs} args - Arguments to find a Codes
     * @example
     * // Get one Codes
     * const codes = await prisma.codes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CodesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CodesFindUniqueArgs<ExtArgs>>
    ): Prisma__CodesClient<$Result.GetResult<Prisma.$CodesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Codes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CodesFindUniqueOrThrowArgs} args - Arguments to find a Codes
     * @example
     * // Get one Codes
     * const codes = await prisma.codes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CodesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CodesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CodesClient<$Result.GetResult<Prisma.$CodesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Codes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodesFindFirstArgs} args - Arguments to find a Codes
     * @example
     * // Get one Codes
     * const codes = await prisma.codes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CodesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CodesFindFirstArgs<ExtArgs>>
    ): Prisma__CodesClient<$Result.GetResult<Prisma.$CodesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Codes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodesFindFirstOrThrowArgs} args - Arguments to find a Codes
     * @example
     * // Get one Codes
     * const codes = await prisma.codes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CodesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CodesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CodesClient<$Result.GetResult<Prisma.$CodesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Codes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Codes
     * const codes = await prisma.codes.findMany()
     * 
     * // Get first 10 Codes
     * const codes = await prisma.codes.findMany({ take: 10 })
     * 
     * // Only select the `Code_Index`
     * const codesWithCode_IndexOnly = await prisma.codes.findMany({ select: { Code_Index: true } })
     * 
    **/
    findMany<T extends CodesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CodesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Codes.
     * @param {CodesCreateArgs} args - Arguments to create a Codes.
     * @example
     * // Create one Codes
     * const Codes = await prisma.codes.create({
     *   data: {
     *     // ... data to create a Codes
     *   }
     * })
     * 
    **/
    create<T extends CodesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CodesCreateArgs<ExtArgs>>
    ): Prisma__CodesClient<$Result.GetResult<Prisma.$CodesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Codes.
     *     @param {CodesCreateManyArgs} args - Arguments to create many Codes.
     *     @example
     *     // Create many Codes
     *     const codes = await prisma.codes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CodesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CodesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Codes.
     * @param {CodesDeleteArgs} args - Arguments to delete one Codes.
     * @example
     * // Delete one Codes
     * const Codes = await prisma.codes.delete({
     *   where: {
     *     // ... filter to delete one Codes
     *   }
     * })
     * 
    **/
    delete<T extends CodesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CodesDeleteArgs<ExtArgs>>
    ): Prisma__CodesClient<$Result.GetResult<Prisma.$CodesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Codes.
     * @param {CodesUpdateArgs} args - Arguments to update one Codes.
     * @example
     * // Update one Codes
     * const codes = await prisma.codes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CodesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CodesUpdateArgs<ExtArgs>>
    ): Prisma__CodesClient<$Result.GetResult<Prisma.$CodesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Codes.
     * @param {CodesDeleteManyArgs} args - Arguments to filter Codes to delete.
     * @example
     * // Delete a few Codes
     * const { count } = await prisma.codes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CodesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CodesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Codes
     * const codes = await prisma.codes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CodesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CodesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Codes.
     * @param {CodesUpsertArgs} args - Arguments to update or create a Codes.
     * @example
     * // Update or create a Codes
     * const codes = await prisma.codes.upsert({
     *   create: {
     *     // ... data to create a Codes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Codes we want to update
     *   }
     * })
    **/
    upsert<T extends CodesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CodesUpsertArgs<ExtArgs>>
    ): Prisma__CodesClient<$Result.GetResult<Prisma.$CodesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodesCountArgs} args - Arguments to filter Codes to count.
     * @example
     * // Count the number of Codes
     * const count = await prisma.codes.count({
     *   where: {
     *     // ... the filter for the Codes we want to count
     *   }
     * })
    **/
    count<T extends CodesCountArgs>(
      args?: Subset<T, CodesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CodesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CodesAggregateArgs>(args: Subset<T, CodesAggregateArgs>): Prisma.PrismaPromise<GetCodesAggregateType<T>>

    /**
     * Group by Codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CodesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CodesGroupByArgs['orderBy'] }
        : { orderBy?: CodesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CodesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCodesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Codes model
   */
  readonly fields: CodesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Codes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CodesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Codes model
   */ 
  interface CodesFieldRefs {
    readonly Code_Index: FieldRef<"Codes", 'Int'>
    readonly Game_ID: FieldRef<"Codes", 'Int'>
    readonly Code_Code: FieldRef<"Codes", 'String'>
    readonly Code_Rewards: FieldRef<"Codes", 'String'>
    readonly Code_End: FieldRef<"Codes", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Codes findUnique
   */
  export type CodesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codes
     */
    select?: CodesSelect<ExtArgs> | null
    /**
     * Filter, which Codes to fetch.
     */
    where: CodesWhereUniqueInput
  }


  /**
   * Codes findUniqueOrThrow
   */
  export type CodesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codes
     */
    select?: CodesSelect<ExtArgs> | null
    /**
     * Filter, which Codes to fetch.
     */
    where: CodesWhereUniqueInput
  }


  /**
   * Codes findFirst
   */
  export type CodesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codes
     */
    select?: CodesSelect<ExtArgs> | null
    /**
     * Filter, which Codes to fetch.
     */
    where?: CodesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Codes to fetch.
     */
    orderBy?: CodesOrderByWithRelationInput | CodesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Codes.
     */
    cursor?: CodesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Codes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Codes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Codes.
     */
    distinct?: CodesScalarFieldEnum | CodesScalarFieldEnum[]
  }


  /**
   * Codes findFirstOrThrow
   */
  export type CodesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codes
     */
    select?: CodesSelect<ExtArgs> | null
    /**
     * Filter, which Codes to fetch.
     */
    where?: CodesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Codes to fetch.
     */
    orderBy?: CodesOrderByWithRelationInput | CodesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Codes.
     */
    cursor?: CodesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Codes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Codes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Codes.
     */
    distinct?: CodesScalarFieldEnum | CodesScalarFieldEnum[]
  }


  /**
   * Codes findMany
   */
  export type CodesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codes
     */
    select?: CodesSelect<ExtArgs> | null
    /**
     * Filter, which Codes to fetch.
     */
    where?: CodesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Codes to fetch.
     */
    orderBy?: CodesOrderByWithRelationInput | CodesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Codes.
     */
    cursor?: CodesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Codes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Codes.
     */
    skip?: number
    distinct?: CodesScalarFieldEnum | CodesScalarFieldEnum[]
  }


  /**
   * Codes create
   */
  export type CodesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codes
     */
    select?: CodesSelect<ExtArgs> | null
    /**
     * The data needed to create a Codes.
     */
    data: XOR<CodesCreateInput, CodesUncheckedCreateInput>
  }


  /**
   * Codes createMany
   */
  export type CodesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Codes.
     */
    data: CodesCreateManyInput | CodesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Codes update
   */
  export type CodesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codes
     */
    select?: CodesSelect<ExtArgs> | null
    /**
     * The data needed to update a Codes.
     */
    data: XOR<CodesUpdateInput, CodesUncheckedUpdateInput>
    /**
     * Choose, which Codes to update.
     */
    where: CodesWhereUniqueInput
  }


  /**
   * Codes updateMany
   */
  export type CodesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Codes.
     */
    data: XOR<CodesUpdateManyMutationInput, CodesUncheckedUpdateManyInput>
    /**
     * Filter which Codes to update
     */
    where?: CodesWhereInput
  }


  /**
   * Codes upsert
   */
  export type CodesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codes
     */
    select?: CodesSelect<ExtArgs> | null
    /**
     * The filter to search for the Codes to update in case it exists.
     */
    where: CodesWhereUniqueInput
    /**
     * In case the Codes found by the `where` argument doesn't exist, create a new Codes with this data.
     */
    create: XOR<CodesCreateInput, CodesUncheckedCreateInput>
    /**
     * In case the Codes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CodesUpdateInput, CodesUncheckedUpdateInput>
  }


  /**
   * Codes delete
   */
  export type CodesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codes
     */
    select?: CodesSelect<ExtArgs> | null
    /**
     * Filter which Codes to delete.
     */
    where: CodesWhereUniqueInput
  }


  /**
   * Codes deleteMany
   */
  export type CodesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Codes to delete
     */
    where?: CodesWhereInput
  }


  /**
   * Codes without action
   */
  export type CodesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codes
     */
    select?: CodesSelect<ExtArgs> | null
  }



  /**
   * Model Events
   */

  export type AggregateEvents = {
    _count: EventsCountAggregateOutputType | null
    _avg: EventsAvgAggregateOutputType | null
    _sum: EventsSumAggregateOutputType | null
    _min: EventsMinAggregateOutputType | null
    _max: EventsMaxAggregateOutputType | null
  }

  export type EventsAvgAggregateOutputType = {
    Event_Index: number | null
    Game_ID: number | null
  }

  export type EventsSumAggregateOutputType = {
    Event_Index: number | null
    Game_ID: number | null
  }

  export type EventsMinAggregateOutputType = {
    Event_Index: number | null
    Game_ID: number | null
    Event_Name: string | null
    Event_Start: Date | null
    Event_End: Date | null
    Event_Image: string | null
  }

  export type EventsMaxAggregateOutputType = {
    Event_Index: number | null
    Game_ID: number | null
    Event_Name: string | null
    Event_Start: Date | null
    Event_End: Date | null
    Event_Image: string | null
  }

  export type EventsCountAggregateOutputType = {
    Event_Index: number
    Game_ID: number
    Event_Name: number
    Event_Start: number
    Event_End: number
    Event_Image: number
    _all: number
  }


  export type EventsAvgAggregateInputType = {
    Event_Index?: true
    Game_ID?: true
  }

  export type EventsSumAggregateInputType = {
    Event_Index?: true
    Game_ID?: true
  }

  export type EventsMinAggregateInputType = {
    Event_Index?: true
    Game_ID?: true
    Event_Name?: true
    Event_Start?: true
    Event_End?: true
    Event_Image?: true
  }

  export type EventsMaxAggregateInputType = {
    Event_Index?: true
    Game_ID?: true
    Event_Name?: true
    Event_Start?: true
    Event_End?: true
    Event_Image?: true
  }

  export type EventsCountAggregateInputType = {
    Event_Index?: true
    Game_ID?: true
    Event_Name?: true
    Event_Start?: true
    Event_End?: true
    Event_Image?: true
    _all?: true
  }

  export type EventsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to aggregate.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventsMaxAggregateInputType
  }

  export type GetEventsAggregateType<T extends EventsAggregateArgs> = {
        [P in keyof T & keyof AggregateEvents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvents[P]>
      : GetScalarType<T[P], AggregateEvents[P]>
  }




  export type EventsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EventsWhereInput
    orderBy?: EventsOrderByWithAggregationInput | EventsOrderByWithAggregationInput[]
    by: EventsScalarFieldEnum[] | EventsScalarFieldEnum
    having?: EventsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventsCountAggregateInputType | true
    _avg?: EventsAvgAggregateInputType
    _sum?: EventsSumAggregateInputType
    _min?: EventsMinAggregateInputType
    _max?: EventsMaxAggregateInputType
  }

  export type EventsGroupByOutputType = {
    Event_Index: number
    Game_ID: number
    Event_Name: string
    Event_Start: Date
    Event_End: Date | null
    Event_Image: string
    _count: EventsCountAggregateOutputType | null
    _avg: EventsAvgAggregateOutputType | null
    _sum: EventsSumAggregateOutputType | null
    _min: EventsMinAggregateOutputType | null
    _max: EventsMaxAggregateOutputType | null
  }

  type GetEventsGroupByPayload<T extends EventsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventsGroupByOutputType[P]>
            : GetScalarType<T[P], EventsGroupByOutputType[P]>
        }
      >
    >


  export type EventsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Event_Index?: boolean
    Game_ID?: boolean
    Event_Name?: boolean
    Event_Start?: boolean
    Event_End?: boolean
    Event_Image?: boolean
  }, ExtArgs["result"]["events"]>

  export type EventsSelectScalar = {
    Event_Index?: boolean
    Game_ID?: boolean
    Event_Name?: boolean
    Event_Start?: boolean
    Event_End?: boolean
    Event_Image?: boolean
  }


  export type $EventsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Events"
    objects: {}
    scalars: $Extensions.GetResult<{
      Event_Index: number
      Game_ID: number
      Event_Name: string
      Event_Start: Date
      Event_End: Date | null
      Event_Image: string
    }, ExtArgs["result"]["events"]>
    composites: {}
  }


  type EventsGetPayload<S extends boolean | null | undefined | EventsDefaultArgs> = $Result.GetResult<Prisma.$EventsPayload, S>

  type EventsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<EventsFindManyArgs, 'select' | 'include'> & {
      select?: EventsCountAggregateInputType | true
    }

  export interface EventsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Events'], meta: { name: 'Events' } }
    /**
     * Find zero or one Events that matches the filter.
     * @param {EventsFindUniqueArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EventsFindUniqueArgs<ExtArgs>>
    ): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Events that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EventsFindUniqueOrThrowArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsFindFirstArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EventsFindFirstArgs<ExtArgs>>
    ): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Events that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsFindFirstOrThrowArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.events.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.events.findMany({ take: 10 })
     * 
     * // Only select the `Event_Index`
     * const eventsWithEvent_IndexOnly = await prisma.events.findMany({ select: { Event_Index: true } })
     * 
    **/
    findMany<T extends EventsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Events.
     * @param {EventsCreateArgs} args - Arguments to create a Events.
     * @example
     * // Create one Events
     * const Events = await prisma.events.create({
     *   data: {
     *     // ... data to create a Events
     *   }
     * })
     * 
    **/
    create<T extends EventsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EventsCreateArgs<ExtArgs>>
    ): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Events.
     *     @param {EventsCreateManyArgs} args - Arguments to create many Events.
     *     @example
     *     // Create many Events
     *     const events = await prisma.events.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Events.
     * @param {EventsDeleteArgs} args - Arguments to delete one Events.
     * @example
     * // Delete one Events
     * const Events = await prisma.events.delete({
     *   where: {
     *     // ... filter to delete one Events
     *   }
     * })
     * 
    **/
    delete<T extends EventsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EventsDeleteArgs<ExtArgs>>
    ): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Events.
     * @param {EventsUpdateArgs} args - Arguments to update one Events.
     * @example
     * // Update one Events
     * const events = await prisma.events.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EventsUpdateArgs<ExtArgs>>
    ): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventsDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.events.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const events = await prisma.events.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EventsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Events.
     * @param {EventsUpsertArgs} args - Arguments to update or create a Events.
     * @example
     * // Update or create a Events
     * const events = await prisma.events.upsert({
     *   create: {
     *     // ... data to create a Events
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Events we want to update
     *   }
     * })
    **/
    upsert<T extends EventsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EventsUpsertArgs<ExtArgs>>
    ): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.events.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventsCountArgs>(
      args?: Subset<T, EventsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventsAggregateArgs>(args: Subset<T, EventsAggregateArgs>): Prisma.PrismaPromise<GetEventsAggregateType<T>>

    /**
     * Group by Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventsGroupByArgs['orderBy'] }
        : { orderBy?: EventsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Events model
   */
  readonly fields: EventsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Events.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Events model
   */ 
  interface EventsFieldRefs {
    readonly Event_Index: FieldRef<"Events", 'Int'>
    readonly Game_ID: FieldRef<"Events", 'Int'>
    readonly Event_Name: FieldRef<"Events", 'String'>
    readonly Event_Start: FieldRef<"Events", 'DateTime'>
    readonly Event_End: FieldRef<"Events", 'DateTime'>
    readonly Event_Image: FieldRef<"Events", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Events findUnique
   */
  export type EventsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where: EventsWhereUniqueInput
  }


  /**
   * Events findUniqueOrThrow
   */
  export type EventsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where: EventsWhereUniqueInput
  }


  /**
   * Events findFirst
   */
  export type EventsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }


  /**
   * Events findFirstOrThrow
   */
  export type EventsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }


  /**
   * Events findMany
   */
  export type EventsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }


  /**
   * Events create
   */
  export type EventsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * The data needed to create a Events.
     */
    data: XOR<EventsCreateInput, EventsUncheckedCreateInput>
  }


  /**
   * Events createMany
   */
  export type EventsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventsCreateManyInput | EventsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Events update
   */
  export type EventsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * The data needed to update a Events.
     */
    data: XOR<EventsUpdateInput, EventsUncheckedUpdateInput>
    /**
     * Choose, which Events to update.
     */
    where: EventsWhereUniqueInput
  }


  /**
   * Events updateMany
   */
  export type EventsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventsUpdateManyMutationInput, EventsUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventsWhereInput
  }


  /**
   * Events upsert
   */
  export type EventsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * The filter to search for the Events to update in case it exists.
     */
    where: EventsWhereUniqueInput
    /**
     * In case the Events found by the `where` argument doesn't exist, create a new Events with this data.
     */
    create: XOR<EventsCreateInput, EventsUncheckedCreateInput>
    /**
     * In case the Events was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventsUpdateInput, EventsUncheckedUpdateInput>
  }


  /**
   * Events delete
   */
  export type EventsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Filter which Events to delete.
     */
    where: EventsWhereUniqueInput
  }


  /**
   * Events deleteMany
   */
  export type EventsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventsWhereInput
  }


  /**
   * Events without action
   */
  export type EventsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
  }



  /**
   * Model Game_General
   */

  export type AggregateGame_General = {
    _count: Game_GeneralCountAggregateOutputType | null
    _avg: Game_GeneralAvgAggregateOutputType | null
    _sum: Game_GeneralSumAggregateOutputType | null
    _min: Game_GeneralMinAggregateOutputType | null
    _max: Game_GeneralMaxAggregateOutputType | null
  }

  export type Game_GeneralAvgAggregateOutputType = {
    Game_ID: number | null
  }

  export type Game_GeneralSumAggregateOutputType = {
    Game_ID: number | null
  }

  export type Game_GeneralMinAggregateOutputType = {
    Game_ID: number | null
    Game_Name: string | null
  }

  export type Game_GeneralMaxAggregateOutputType = {
    Game_ID: number | null
    Game_Name: string | null
  }

  export type Game_GeneralCountAggregateOutputType = {
    Game_ID: number
    Game_Name: number
    _all: number
  }


  export type Game_GeneralAvgAggregateInputType = {
    Game_ID?: true
  }

  export type Game_GeneralSumAggregateInputType = {
    Game_ID?: true
  }

  export type Game_GeneralMinAggregateInputType = {
    Game_ID?: true
    Game_Name?: true
  }

  export type Game_GeneralMaxAggregateInputType = {
    Game_ID?: true
    Game_Name?: true
  }

  export type Game_GeneralCountAggregateInputType = {
    Game_ID?: true
    Game_Name?: true
    _all?: true
  }

  export type Game_GeneralAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game_General to aggregate.
     */
    where?: Game_GeneralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Game_Generals to fetch.
     */
    orderBy?: Game_GeneralOrderByWithRelationInput | Game_GeneralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Game_GeneralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Game_Generals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Game_Generals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Game_Generals
    **/
    _count?: true | Game_GeneralCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Game_GeneralAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Game_GeneralSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Game_GeneralMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Game_GeneralMaxAggregateInputType
  }

  export type GetGame_GeneralAggregateType<T extends Game_GeneralAggregateArgs> = {
        [P in keyof T & keyof AggregateGame_General]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame_General[P]>
      : GetScalarType<T[P], AggregateGame_General[P]>
  }




  export type Game_GeneralGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Game_GeneralWhereInput
    orderBy?: Game_GeneralOrderByWithAggregationInput | Game_GeneralOrderByWithAggregationInput[]
    by: Game_GeneralScalarFieldEnum[] | Game_GeneralScalarFieldEnum
    having?: Game_GeneralScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Game_GeneralCountAggregateInputType | true
    _avg?: Game_GeneralAvgAggregateInputType
    _sum?: Game_GeneralSumAggregateInputType
    _min?: Game_GeneralMinAggregateInputType
    _max?: Game_GeneralMaxAggregateInputType
  }

  export type Game_GeneralGroupByOutputType = {
    Game_ID: number
    Game_Name: string
    _count: Game_GeneralCountAggregateOutputType | null
    _avg: Game_GeneralAvgAggregateOutputType | null
    _sum: Game_GeneralSumAggregateOutputType | null
    _min: Game_GeneralMinAggregateOutputType | null
    _max: Game_GeneralMaxAggregateOutputType | null
  }

  type GetGame_GeneralGroupByPayload<T extends Game_GeneralGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Game_GeneralGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Game_GeneralGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Game_GeneralGroupByOutputType[P]>
            : GetScalarType<T[P], Game_GeneralGroupByOutputType[P]>
        }
      >
    >


  export type Game_GeneralSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Game_ID?: boolean
    Game_Name?: boolean
  }, ExtArgs["result"]["game_General"]>

  export type Game_GeneralSelectScalar = {
    Game_ID?: boolean
    Game_Name?: boolean
  }


  export type $Game_GeneralPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Game_General"
    objects: {}
    scalars: $Extensions.GetResult<{
      Game_ID: number
      Game_Name: string
    }, ExtArgs["result"]["game_General"]>
    composites: {}
  }


  type Game_GeneralGetPayload<S extends boolean | null | undefined | Game_GeneralDefaultArgs> = $Result.GetResult<Prisma.$Game_GeneralPayload, S>

  type Game_GeneralCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Game_GeneralFindManyArgs, 'select' | 'include'> & {
      select?: Game_GeneralCountAggregateInputType | true
    }

  export interface Game_GeneralDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game_General'], meta: { name: 'Game_General' } }
    /**
     * Find zero or one Game_General that matches the filter.
     * @param {Game_GeneralFindUniqueArgs} args - Arguments to find a Game_General
     * @example
     * // Get one Game_General
     * const game_General = await prisma.game_General.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Game_GeneralFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Game_GeneralFindUniqueArgs<ExtArgs>>
    ): Prisma__Game_GeneralClient<$Result.GetResult<Prisma.$Game_GeneralPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Game_General that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Game_GeneralFindUniqueOrThrowArgs} args - Arguments to find a Game_General
     * @example
     * // Get one Game_General
     * const game_General = await prisma.game_General.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Game_GeneralFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Game_GeneralFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Game_GeneralClient<$Result.GetResult<Prisma.$Game_GeneralPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Game_General that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Game_GeneralFindFirstArgs} args - Arguments to find a Game_General
     * @example
     * // Get one Game_General
     * const game_General = await prisma.game_General.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Game_GeneralFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Game_GeneralFindFirstArgs<ExtArgs>>
    ): Prisma__Game_GeneralClient<$Result.GetResult<Prisma.$Game_GeneralPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Game_General that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Game_GeneralFindFirstOrThrowArgs} args - Arguments to find a Game_General
     * @example
     * // Get one Game_General
     * const game_General = await prisma.game_General.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Game_GeneralFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Game_GeneralFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Game_GeneralClient<$Result.GetResult<Prisma.$Game_GeneralPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Game_Generals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Game_GeneralFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Game_Generals
     * const game_Generals = await prisma.game_General.findMany()
     * 
     * // Get first 10 Game_Generals
     * const game_Generals = await prisma.game_General.findMany({ take: 10 })
     * 
     * // Only select the `Game_ID`
     * const game_GeneralWithGame_IDOnly = await prisma.game_General.findMany({ select: { Game_ID: true } })
     * 
    **/
    findMany<T extends Game_GeneralFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Game_GeneralFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Game_GeneralPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Game_General.
     * @param {Game_GeneralCreateArgs} args - Arguments to create a Game_General.
     * @example
     * // Create one Game_General
     * const Game_General = await prisma.game_General.create({
     *   data: {
     *     // ... data to create a Game_General
     *   }
     * })
     * 
    **/
    create<T extends Game_GeneralCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Game_GeneralCreateArgs<ExtArgs>>
    ): Prisma__Game_GeneralClient<$Result.GetResult<Prisma.$Game_GeneralPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Game_Generals.
     *     @param {Game_GeneralCreateManyArgs} args - Arguments to create many Game_Generals.
     *     @example
     *     // Create many Game_Generals
     *     const game_General = await prisma.game_General.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Game_GeneralCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Game_GeneralCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Game_General.
     * @param {Game_GeneralDeleteArgs} args - Arguments to delete one Game_General.
     * @example
     * // Delete one Game_General
     * const Game_General = await prisma.game_General.delete({
     *   where: {
     *     // ... filter to delete one Game_General
     *   }
     * })
     * 
    **/
    delete<T extends Game_GeneralDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Game_GeneralDeleteArgs<ExtArgs>>
    ): Prisma__Game_GeneralClient<$Result.GetResult<Prisma.$Game_GeneralPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Game_General.
     * @param {Game_GeneralUpdateArgs} args - Arguments to update one Game_General.
     * @example
     * // Update one Game_General
     * const game_General = await prisma.game_General.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Game_GeneralUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Game_GeneralUpdateArgs<ExtArgs>>
    ): Prisma__Game_GeneralClient<$Result.GetResult<Prisma.$Game_GeneralPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Game_Generals.
     * @param {Game_GeneralDeleteManyArgs} args - Arguments to filter Game_Generals to delete.
     * @example
     * // Delete a few Game_Generals
     * const { count } = await prisma.game_General.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Game_GeneralDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Game_GeneralDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Game_Generals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Game_GeneralUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Game_Generals
     * const game_General = await prisma.game_General.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Game_GeneralUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Game_GeneralUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game_General.
     * @param {Game_GeneralUpsertArgs} args - Arguments to update or create a Game_General.
     * @example
     * // Update or create a Game_General
     * const game_General = await prisma.game_General.upsert({
     *   create: {
     *     // ... data to create a Game_General
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game_General we want to update
     *   }
     * })
    **/
    upsert<T extends Game_GeneralUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Game_GeneralUpsertArgs<ExtArgs>>
    ): Prisma__Game_GeneralClient<$Result.GetResult<Prisma.$Game_GeneralPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Game_Generals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Game_GeneralCountArgs} args - Arguments to filter Game_Generals to count.
     * @example
     * // Count the number of Game_Generals
     * const count = await prisma.game_General.count({
     *   where: {
     *     // ... the filter for the Game_Generals we want to count
     *   }
     * })
    **/
    count<T extends Game_GeneralCountArgs>(
      args?: Subset<T, Game_GeneralCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Game_GeneralCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game_General.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Game_GeneralAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Game_GeneralAggregateArgs>(args: Subset<T, Game_GeneralAggregateArgs>): Prisma.PrismaPromise<GetGame_GeneralAggregateType<T>>

    /**
     * Group by Game_General.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Game_GeneralGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Game_GeneralGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Game_GeneralGroupByArgs['orderBy'] }
        : { orderBy?: Game_GeneralGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Game_GeneralGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGame_GeneralGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game_General model
   */
  readonly fields: Game_GeneralFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game_General.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Game_GeneralClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Game_General model
   */ 
  interface Game_GeneralFieldRefs {
    readonly Game_ID: FieldRef<"Game_General", 'Int'>
    readonly Game_Name: FieldRef<"Game_General", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Game_General findUnique
   */
  export type Game_GeneralFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game_General
     */
    select?: Game_GeneralSelect<ExtArgs> | null
    /**
     * Filter, which Game_General to fetch.
     */
    where: Game_GeneralWhereUniqueInput
  }


  /**
   * Game_General findUniqueOrThrow
   */
  export type Game_GeneralFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game_General
     */
    select?: Game_GeneralSelect<ExtArgs> | null
    /**
     * Filter, which Game_General to fetch.
     */
    where: Game_GeneralWhereUniqueInput
  }


  /**
   * Game_General findFirst
   */
  export type Game_GeneralFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game_General
     */
    select?: Game_GeneralSelect<ExtArgs> | null
    /**
     * Filter, which Game_General to fetch.
     */
    where?: Game_GeneralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Game_Generals to fetch.
     */
    orderBy?: Game_GeneralOrderByWithRelationInput | Game_GeneralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Game_Generals.
     */
    cursor?: Game_GeneralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Game_Generals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Game_Generals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Game_Generals.
     */
    distinct?: Game_GeneralScalarFieldEnum | Game_GeneralScalarFieldEnum[]
  }


  /**
   * Game_General findFirstOrThrow
   */
  export type Game_GeneralFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game_General
     */
    select?: Game_GeneralSelect<ExtArgs> | null
    /**
     * Filter, which Game_General to fetch.
     */
    where?: Game_GeneralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Game_Generals to fetch.
     */
    orderBy?: Game_GeneralOrderByWithRelationInput | Game_GeneralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Game_Generals.
     */
    cursor?: Game_GeneralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Game_Generals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Game_Generals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Game_Generals.
     */
    distinct?: Game_GeneralScalarFieldEnum | Game_GeneralScalarFieldEnum[]
  }


  /**
   * Game_General findMany
   */
  export type Game_GeneralFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game_General
     */
    select?: Game_GeneralSelect<ExtArgs> | null
    /**
     * Filter, which Game_Generals to fetch.
     */
    where?: Game_GeneralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Game_Generals to fetch.
     */
    orderBy?: Game_GeneralOrderByWithRelationInput | Game_GeneralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Game_Generals.
     */
    cursor?: Game_GeneralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Game_Generals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Game_Generals.
     */
    skip?: number
    distinct?: Game_GeneralScalarFieldEnum | Game_GeneralScalarFieldEnum[]
  }


  /**
   * Game_General create
   */
  export type Game_GeneralCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game_General
     */
    select?: Game_GeneralSelect<ExtArgs> | null
    /**
     * The data needed to create a Game_General.
     */
    data: XOR<Game_GeneralCreateInput, Game_GeneralUncheckedCreateInput>
  }


  /**
   * Game_General createMany
   */
  export type Game_GeneralCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Game_Generals.
     */
    data: Game_GeneralCreateManyInput | Game_GeneralCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Game_General update
   */
  export type Game_GeneralUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game_General
     */
    select?: Game_GeneralSelect<ExtArgs> | null
    /**
     * The data needed to update a Game_General.
     */
    data: XOR<Game_GeneralUpdateInput, Game_GeneralUncheckedUpdateInput>
    /**
     * Choose, which Game_General to update.
     */
    where: Game_GeneralWhereUniqueInput
  }


  /**
   * Game_General updateMany
   */
  export type Game_GeneralUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Game_Generals.
     */
    data: XOR<Game_GeneralUpdateManyMutationInput, Game_GeneralUncheckedUpdateManyInput>
    /**
     * Filter which Game_Generals to update
     */
    where?: Game_GeneralWhereInput
  }


  /**
   * Game_General upsert
   */
  export type Game_GeneralUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game_General
     */
    select?: Game_GeneralSelect<ExtArgs> | null
    /**
     * The filter to search for the Game_General to update in case it exists.
     */
    where: Game_GeneralWhereUniqueInput
    /**
     * In case the Game_General found by the `where` argument doesn't exist, create a new Game_General with this data.
     */
    create: XOR<Game_GeneralCreateInput, Game_GeneralUncheckedCreateInput>
    /**
     * In case the Game_General was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Game_GeneralUpdateInput, Game_GeneralUncheckedUpdateInput>
  }


  /**
   * Game_General delete
   */
  export type Game_GeneralDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game_General
     */
    select?: Game_GeneralSelect<ExtArgs> | null
    /**
     * Filter which Game_General to delete.
     */
    where: Game_GeneralWhereUniqueInput
  }


  /**
   * Game_General deleteMany
   */
  export type Game_GeneralDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game_Generals to delete
     */
    where?: Game_GeneralWhereInput
  }


  /**
   * Game_General without action
   */
  export type Game_GeneralDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game_General
     */
    select?: Game_GeneralSelect<ExtArgs> | null
  }



  /**
   * Model Games_Users
   */

  export type AggregateGames_Users = {
    _count: Games_UsersCountAggregateOutputType | null
    _min: Games_UsersMinAggregateOutputType | null
    _max: Games_UsersMaxAggregateOutputType | null
  }

  export type Games_UsersMinAggregateOutputType = {
    UID: string | null
    Genshin_UID: string | null
    StarRail_UID: string | null
  }

  export type Games_UsersMaxAggregateOutputType = {
    UID: string | null
    Genshin_UID: string | null
    StarRail_UID: string | null
  }

  export type Games_UsersCountAggregateOutputType = {
    UID: number
    Genshin_UID: number
    StarRail_UID: number
    _all: number
  }


  export type Games_UsersMinAggregateInputType = {
    UID?: true
    Genshin_UID?: true
    StarRail_UID?: true
  }

  export type Games_UsersMaxAggregateInputType = {
    UID?: true
    Genshin_UID?: true
    StarRail_UID?: true
  }

  export type Games_UsersCountAggregateInputType = {
    UID?: true
    Genshin_UID?: true
    StarRail_UID?: true
    _all?: true
  }

  export type Games_UsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games_Users to aggregate.
     */
    where?: Games_UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games_Users to fetch.
     */
    orderBy?: Games_UsersOrderByWithRelationInput | Games_UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Games_UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games_Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games_Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games_Users
    **/
    _count?: true | Games_UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Games_UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Games_UsersMaxAggregateInputType
  }

  export type GetGames_UsersAggregateType<T extends Games_UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateGames_Users]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGames_Users[P]>
      : GetScalarType<T[P], AggregateGames_Users[P]>
  }




  export type Games_UsersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Games_UsersWhereInput
    orderBy?: Games_UsersOrderByWithAggregationInput | Games_UsersOrderByWithAggregationInput[]
    by: Games_UsersScalarFieldEnum[] | Games_UsersScalarFieldEnum
    having?: Games_UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Games_UsersCountAggregateInputType | true
    _min?: Games_UsersMinAggregateInputType
    _max?: Games_UsersMaxAggregateInputType
  }

  export type Games_UsersGroupByOutputType = {
    UID: string
    Genshin_UID: string | null
    StarRail_UID: string | null
    _count: Games_UsersCountAggregateOutputType | null
    _min: Games_UsersMinAggregateOutputType | null
    _max: Games_UsersMaxAggregateOutputType | null
  }

  type GetGames_UsersGroupByPayload<T extends Games_UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Games_UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Games_UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Games_UsersGroupByOutputType[P]>
            : GetScalarType<T[P], Games_UsersGroupByOutputType[P]>
        }
      >
    >


  export type Games_UsersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UID?: boolean
    Genshin_UID?: boolean
    StarRail_UID?: boolean
  }, ExtArgs["result"]["games_Users"]>

  export type Games_UsersSelectScalar = {
    UID?: boolean
    Genshin_UID?: boolean
    StarRail_UID?: boolean
  }


  export type $Games_UsersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Games_Users"
    objects: {}
    scalars: $Extensions.GetResult<{
      UID: string
      Genshin_UID: string | null
      StarRail_UID: string | null
    }, ExtArgs["result"]["games_Users"]>
    composites: {}
  }


  type Games_UsersGetPayload<S extends boolean | null | undefined | Games_UsersDefaultArgs> = $Result.GetResult<Prisma.$Games_UsersPayload, S>

  type Games_UsersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Games_UsersFindManyArgs, 'select' | 'include'> & {
      select?: Games_UsersCountAggregateInputType | true
    }

  export interface Games_UsersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Games_Users'], meta: { name: 'Games_Users' } }
    /**
     * Find zero or one Games_Users that matches the filter.
     * @param {Games_UsersFindUniqueArgs} args - Arguments to find a Games_Users
     * @example
     * // Get one Games_Users
     * const games_Users = await prisma.games_Users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Games_UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Games_UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__Games_UsersClient<$Result.GetResult<Prisma.$Games_UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Games_Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Games_UsersFindUniqueOrThrowArgs} args - Arguments to find a Games_Users
     * @example
     * // Get one Games_Users
     * const games_Users = await prisma.games_Users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Games_UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Games_UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Games_UsersClient<$Result.GetResult<Prisma.$Games_UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Games_Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Games_UsersFindFirstArgs} args - Arguments to find a Games_Users
     * @example
     * // Get one Games_Users
     * const games_Users = await prisma.games_Users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Games_UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Games_UsersFindFirstArgs<ExtArgs>>
    ): Prisma__Games_UsersClient<$Result.GetResult<Prisma.$Games_UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Games_Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Games_UsersFindFirstOrThrowArgs} args - Arguments to find a Games_Users
     * @example
     * // Get one Games_Users
     * const games_Users = await prisma.games_Users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Games_UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Games_UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Games_UsersClient<$Result.GetResult<Prisma.$Games_UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Games_Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Games_UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games_Users
     * const games_Users = await prisma.games_Users.findMany()
     * 
     * // Get first 10 Games_Users
     * const games_Users = await prisma.games_Users.findMany({ take: 10 })
     * 
     * // Only select the `UID`
     * const games_UsersWithUIDOnly = await prisma.games_Users.findMany({ select: { UID: true } })
     * 
    **/
    findMany<T extends Games_UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Games_UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Games_UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Games_Users.
     * @param {Games_UsersCreateArgs} args - Arguments to create a Games_Users.
     * @example
     * // Create one Games_Users
     * const Games_Users = await prisma.games_Users.create({
     *   data: {
     *     // ... data to create a Games_Users
     *   }
     * })
     * 
    **/
    create<T extends Games_UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Games_UsersCreateArgs<ExtArgs>>
    ): Prisma__Games_UsersClient<$Result.GetResult<Prisma.$Games_UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Games_Users.
     *     @param {Games_UsersCreateManyArgs} args - Arguments to create many Games_Users.
     *     @example
     *     // Create many Games_Users
     *     const games_Users = await prisma.games_Users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Games_UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Games_UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Games_Users.
     * @param {Games_UsersDeleteArgs} args - Arguments to delete one Games_Users.
     * @example
     * // Delete one Games_Users
     * const Games_Users = await prisma.games_Users.delete({
     *   where: {
     *     // ... filter to delete one Games_Users
     *   }
     * })
     * 
    **/
    delete<T extends Games_UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Games_UsersDeleteArgs<ExtArgs>>
    ): Prisma__Games_UsersClient<$Result.GetResult<Prisma.$Games_UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Games_Users.
     * @param {Games_UsersUpdateArgs} args - Arguments to update one Games_Users.
     * @example
     * // Update one Games_Users
     * const games_Users = await prisma.games_Users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Games_UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Games_UsersUpdateArgs<ExtArgs>>
    ): Prisma__Games_UsersClient<$Result.GetResult<Prisma.$Games_UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Games_Users.
     * @param {Games_UsersDeleteManyArgs} args - Arguments to filter Games_Users to delete.
     * @example
     * // Delete a few Games_Users
     * const { count } = await prisma.games_Users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Games_UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Games_UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games_Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Games_UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games_Users
     * const games_Users = await prisma.games_Users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Games_UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Games_UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Games_Users.
     * @param {Games_UsersUpsertArgs} args - Arguments to update or create a Games_Users.
     * @example
     * // Update or create a Games_Users
     * const games_Users = await prisma.games_Users.upsert({
     *   create: {
     *     // ... data to create a Games_Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Games_Users we want to update
     *   }
     * })
    **/
    upsert<T extends Games_UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Games_UsersUpsertArgs<ExtArgs>>
    ): Prisma__Games_UsersClient<$Result.GetResult<Prisma.$Games_UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Games_Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Games_UsersCountArgs} args - Arguments to filter Games_Users to count.
     * @example
     * // Count the number of Games_Users
     * const count = await prisma.games_Users.count({
     *   where: {
     *     // ... the filter for the Games_Users we want to count
     *   }
     * })
    **/
    count<T extends Games_UsersCountArgs>(
      args?: Subset<T, Games_UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Games_UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Games_Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Games_UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Games_UsersAggregateArgs>(args: Subset<T, Games_UsersAggregateArgs>): Prisma.PrismaPromise<GetGames_UsersAggregateType<T>>

    /**
     * Group by Games_Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Games_UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Games_UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Games_UsersGroupByArgs['orderBy'] }
        : { orderBy?: Games_UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Games_UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGames_UsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Games_Users model
   */
  readonly fields: Games_UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Games_Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Games_UsersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Games_Users model
   */ 
  interface Games_UsersFieldRefs {
    readonly UID: FieldRef<"Games_Users", 'String'>
    readonly Genshin_UID: FieldRef<"Games_Users", 'String'>
    readonly StarRail_UID: FieldRef<"Games_Users", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Games_Users findUnique
   */
  export type Games_UsersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games_Users
     */
    select?: Games_UsersSelect<ExtArgs> | null
    /**
     * Filter, which Games_Users to fetch.
     */
    where: Games_UsersWhereUniqueInput
  }


  /**
   * Games_Users findUniqueOrThrow
   */
  export type Games_UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games_Users
     */
    select?: Games_UsersSelect<ExtArgs> | null
    /**
     * Filter, which Games_Users to fetch.
     */
    where: Games_UsersWhereUniqueInput
  }


  /**
   * Games_Users findFirst
   */
  export type Games_UsersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games_Users
     */
    select?: Games_UsersSelect<ExtArgs> | null
    /**
     * Filter, which Games_Users to fetch.
     */
    where?: Games_UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games_Users to fetch.
     */
    orderBy?: Games_UsersOrderByWithRelationInput | Games_UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games_Users.
     */
    cursor?: Games_UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games_Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games_Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games_Users.
     */
    distinct?: Games_UsersScalarFieldEnum | Games_UsersScalarFieldEnum[]
  }


  /**
   * Games_Users findFirstOrThrow
   */
  export type Games_UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games_Users
     */
    select?: Games_UsersSelect<ExtArgs> | null
    /**
     * Filter, which Games_Users to fetch.
     */
    where?: Games_UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games_Users to fetch.
     */
    orderBy?: Games_UsersOrderByWithRelationInput | Games_UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games_Users.
     */
    cursor?: Games_UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games_Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games_Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games_Users.
     */
    distinct?: Games_UsersScalarFieldEnum | Games_UsersScalarFieldEnum[]
  }


  /**
   * Games_Users findMany
   */
  export type Games_UsersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games_Users
     */
    select?: Games_UsersSelect<ExtArgs> | null
    /**
     * Filter, which Games_Users to fetch.
     */
    where?: Games_UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games_Users to fetch.
     */
    orderBy?: Games_UsersOrderByWithRelationInput | Games_UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games_Users.
     */
    cursor?: Games_UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games_Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games_Users.
     */
    skip?: number
    distinct?: Games_UsersScalarFieldEnum | Games_UsersScalarFieldEnum[]
  }


  /**
   * Games_Users create
   */
  export type Games_UsersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games_Users
     */
    select?: Games_UsersSelect<ExtArgs> | null
    /**
     * The data needed to create a Games_Users.
     */
    data: XOR<Games_UsersCreateInput, Games_UsersUncheckedCreateInput>
  }


  /**
   * Games_Users createMany
   */
  export type Games_UsersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games_Users.
     */
    data: Games_UsersCreateManyInput | Games_UsersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Games_Users update
   */
  export type Games_UsersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games_Users
     */
    select?: Games_UsersSelect<ExtArgs> | null
    /**
     * The data needed to update a Games_Users.
     */
    data: XOR<Games_UsersUpdateInput, Games_UsersUncheckedUpdateInput>
    /**
     * Choose, which Games_Users to update.
     */
    where: Games_UsersWhereUniqueInput
  }


  /**
   * Games_Users updateMany
   */
  export type Games_UsersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games_Users.
     */
    data: XOR<Games_UsersUpdateManyMutationInput, Games_UsersUncheckedUpdateManyInput>
    /**
     * Filter which Games_Users to update
     */
    where?: Games_UsersWhereInput
  }


  /**
   * Games_Users upsert
   */
  export type Games_UsersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games_Users
     */
    select?: Games_UsersSelect<ExtArgs> | null
    /**
     * The filter to search for the Games_Users to update in case it exists.
     */
    where: Games_UsersWhereUniqueInput
    /**
     * In case the Games_Users found by the `where` argument doesn't exist, create a new Games_Users with this data.
     */
    create: XOR<Games_UsersCreateInput, Games_UsersUncheckedCreateInput>
    /**
     * In case the Games_Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Games_UsersUpdateInput, Games_UsersUncheckedUpdateInput>
  }


  /**
   * Games_Users delete
   */
  export type Games_UsersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games_Users
     */
    select?: Games_UsersSelect<ExtArgs> | null
    /**
     * Filter which Games_Users to delete.
     */
    where: Games_UsersWhereUniqueInput
  }


  /**
   * Games_Users deleteMany
   */
  export type Games_UsersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games_Users to delete
     */
    where?: Games_UsersWhereInput
  }


  /**
   * Games_Users without action
   */
  export type Games_UsersDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games_Users
     */
    select?: Games_UsersSelect<ExtArgs> | null
  }



  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    UID: string | null
    Username: string | null
    Password_Hash: string | null
    Email: string | null
    Registration_Date: Date | null
    Last_Login: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    UID: string | null
    Username: string | null
    Password_Hash: string | null
    Email: string | null
    Registration_Date: Date | null
    Last_Login: Date | null
  }

  export type UsersCountAggregateOutputType = {
    UID: number
    Username: number
    Password_Hash: number
    Email: number
    Registration_Date: number
    Last_Login: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    UID?: true
    Username?: true
    Password_Hash?: true
    Email?: true
    Registration_Date?: true
    Last_Login?: true
  }

  export type UsersMaxAggregateInputType = {
    UID?: true
    Username?: true
    Password_Hash?: true
    Email?: true
    Registration_Date?: true
    Last_Login?: true
  }

  export type UsersCountAggregateInputType = {
    UID?: true
    Username?: true
    Password_Hash?: true
    Email?: true
    Registration_Date?: true
    Last_Login?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    UID: string
    Username: string
    Password_Hash: string
    Email: string
    Registration_Date: Date
    Last_Login: Date | null
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UID?: boolean
    Username?: boolean
    Password_Hash?: boolean
    Email?: boolean
    Registration_Date?: boolean
    Last_Login?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    UID?: boolean
    Username?: boolean
    Password_Hash?: boolean
    Email?: boolean
    Registration_Date?: boolean
    Last_Login?: boolean
  }


  export type $UsersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {}
    scalars: $Extensions.GetResult<{
      UID: string
      Username: string
      Password_Hash: string
      Email: string
      Registration_Date: Date
      Last_Login: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `UID`
     * const usersWithUIDOnly = await prisma.users.findMany({ select: { UID: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly UID: FieldRef<"Users", 'String'>
    readonly Username: FieldRef<"Users", 'String'>
    readonly Password_Hash: FieldRef<"Users", 'String'>
    readonly Email: FieldRef<"Users", 'String'>
    readonly Registration_Date: FieldRef<"Users", 'DateTime'>
    readonly Last_Login: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
  }



  /**
   * Model Genshin_Draw
   */

  export type AggregateGenshin_Draw = {
    _count: Genshin_DrawCountAggregateOutputType | null
    _avg: Genshin_DrawAvgAggregateOutputType | null
    _sum: Genshin_DrawSumAggregateOutputType | null
    _min: Genshin_DrawMinAggregateOutputType | null
    _max: Genshin_DrawMaxAggregateOutputType | null
  }

  export type Genshin_DrawAvgAggregateOutputType = {
    Wish_Index: number | null
  }

  export type Genshin_DrawSumAggregateOutputType = {
    Wish_Index: number | null
  }

  export type Genshin_DrawMinAggregateOutputType = {
    Wish_Index: number | null
    Genshin_UID: string | null
    DrawID: string | null
    DrawTime: Date | null
    DrawType: string | null
    Item_Name: string | null
    Rarity: string | null
  }

  export type Genshin_DrawMaxAggregateOutputType = {
    Wish_Index: number | null
    Genshin_UID: string | null
    DrawID: string | null
    DrawTime: Date | null
    DrawType: string | null
    Item_Name: string | null
    Rarity: string | null
  }

  export type Genshin_DrawCountAggregateOutputType = {
    Wish_Index: number
    Genshin_UID: number
    DrawID: number
    DrawTime: number
    DrawType: number
    Item_Name: number
    Rarity: number
    _all: number
  }


  export type Genshin_DrawAvgAggregateInputType = {
    Wish_Index?: true
  }

  export type Genshin_DrawSumAggregateInputType = {
    Wish_Index?: true
  }

  export type Genshin_DrawMinAggregateInputType = {
    Wish_Index?: true
    Genshin_UID?: true
    DrawID?: true
    DrawTime?: true
    DrawType?: true
    Item_Name?: true
    Rarity?: true
  }

  export type Genshin_DrawMaxAggregateInputType = {
    Wish_Index?: true
    Genshin_UID?: true
    DrawID?: true
    DrawTime?: true
    DrawType?: true
    Item_Name?: true
    Rarity?: true
  }

  export type Genshin_DrawCountAggregateInputType = {
    Wish_Index?: true
    Genshin_UID?: true
    DrawID?: true
    DrawTime?: true
    DrawType?: true
    Item_Name?: true
    Rarity?: true
    _all?: true
  }

  export type Genshin_DrawAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Genshin_Draw to aggregate.
     */
    where?: Genshin_DrawWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genshin_Draws to fetch.
     */
    orderBy?: Genshin_DrawOrderByWithRelationInput | Genshin_DrawOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Genshin_DrawWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genshin_Draws from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genshin_Draws.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Genshin_Draws
    **/
    _count?: true | Genshin_DrawCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Genshin_DrawAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Genshin_DrawSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Genshin_DrawMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Genshin_DrawMaxAggregateInputType
  }

  export type GetGenshin_DrawAggregateType<T extends Genshin_DrawAggregateArgs> = {
        [P in keyof T & keyof AggregateGenshin_Draw]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenshin_Draw[P]>
      : GetScalarType<T[P], AggregateGenshin_Draw[P]>
  }




  export type Genshin_DrawGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Genshin_DrawWhereInput
    orderBy?: Genshin_DrawOrderByWithAggregationInput | Genshin_DrawOrderByWithAggregationInput[]
    by: Genshin_DrawScalarFieldEnum[] | Genshin_DrawScalarFieldEnum
    having?: Genshin_DrawScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Genshin_DrawCountAggregateInputType | true
    _avg?: Genshin_DrawAvgAggregateInputType
    _sum?: Genshin_DrawSumAggregateInputType
    _min?: Genshin_DrawMinAggregateInputType
    _max?: Genshin_DrawMaxAggregateInputType
  }

  export type Genshin_DrawGroupByOutputType = {
    Wish_Index: number
    Genshin_UID: string
    DrawID: string
    DrawTime: Date
    DrawType: string
    Item_Name: string
    Rarity: string
    _count: Genshin_DrawCountAggregateOutputType | null
    _avg: Genshin_DrawAvgAggregateOutputType | null
    _sum: Genshin_DrawSumAggregateOutputType | null
    _min: Genshin_DrawMinAggregateOutputType | null
    _max: Genshin_DrawMaxAggregateOutputType | null
  }

  type GetGenshin_DrawGroupByPayload<T extends Genshin_DrawGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Genshin_DrawGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Genshin_DrawGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Genshin_DrawGroupByOutputType[P]>
            : GetScalarType<T[P], Genshin_DrawGroupByOutputType[P]>
        }
      >
    >


  export type Genshin_DrawSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Wish_Index?: boolean
    Genshin_UID?: boolean
    DrawID?: boolean
    DrawTime?: boolean
    DrawType?: boolean
    Item_Name?: boolean
    Rarity?: boolean
  }, ExtArgs["result"]["genshin_Draw"]>

  export type Genshin_DrawSelectScalar = {
    Wish_Index?: boolean
    Genshin_UID?: boolean
    DrawID?: boolean
    DrawTime?: boolean
    DrawType?: boolean
    Item_Name?: boolean
    Rarity?: boolean
  }


  export type $Genshin_DrawPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Genshin_Draw"
    objects: {}
    scalars: $Extensions.GetResult<{
      Wish_Index: number
      Genshin_UID: string
      DrawID: string
      DrawTime: Date
      DrawType: string
      Item_Name: string
      Rarity: string
    }, ExtArgs["result"]["genshin_Draw"]>
    composites: {}
  }


  type Genshin_DrawGetPayload<S extends boolean | null | undefined | Genshin_DrawDefaultArgs> = $Result.GetResult<Prisma.$Genshin_DrawPayload, S>

  type Genshin_DrawCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Genshin_DrawFindManyArgs, 'select' | 'include'> & {
      select?: Genshin_DrawCountAggregateInputType | true
    }

  export interface Genshin_DrawDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Genshin_Draw'], meta: { name: 'Genshin_Draw' } }
    /**
     * Find zero or one Genshin_Draw that matches the filter.
     * @param {Genshin_DrawFindUniqueArgs} args - Arguments to find a Genshin_Draw
     * @example
     * // Get one Genshin_Draw
     * const genshin_Draw = await prisma.genshin_Draw.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Genshin_DrawFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Genshin_DrawFindUniqueArgs<ExtArgs>>
    ): Prisma__Genshin_DrawClient<$Result.GetResult<Prisma.$Genshin_DrawPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Genshin_Draw that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Genshin_DrawFindUniqueOrThrowArgs} args - Arguments to find a Genshin_Draw
     * @example
     * // Get one Genshin_Draw
     * const genshin_Draw = await prisma.genshin_Draw.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Genshin_DrawFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Genshin_DrawFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Genshin_DrawClient<$Result.GetResult<Prisma.$Genshin_DrawPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Genshin_Draw that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Genshin_DrawFindFirstArgs} args - Arguments to find a Genshin_Draw
     * @example
     * // Get one Genshin_Draw
     * const genshin_Draw = await prisma.genshin_Draw.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Genshin_DrawFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Genshin_DrawFindFirstArgs<ExtArgs>>
    ): Prisma__Genshin_DrawClient<$Result.GetResult<Prisma.$Genshin_DrawPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Genshin_Draw that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Genshin_DrawFindFirstOrThrowArgs} args - Arguments to find a Genshin_Draw
     * @example
     * // Get one Genshin_Draw
     * const genshin_Draw = await prisma.genshin_Draw.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Genshin_DrawFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Genshin_DrawFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Genshin_DrawClient<$Result.GetResult<Prisma.$Genshin_DrawPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Genshin_Draws that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Genshin_DrawFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Genshin_Draws
     * const genshin_Draws = await prisma.genshin_Draw.findMany()
     * 
     * // Get first 10 Genshin_Draws
     * const genshin_Draws = await prisma.genshin_Draw.findMany({ take: 10 })
     * 
     * // Only select the `Wish_Index`
     * const genshin_DrawWithWish_IndexOnly = await prisma.genshin_Draw.findMany({ select: { Wish_Index: true } })
     * 
    **/
    findMany<T extends Genshin_DrawFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Genshin_DrawFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Genshin_DrawPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Genshin_Draw.
     * @param {Genshin_DrawCreateArgs} args - Arguments to create a Genshin_Draw.
     * @example
     * // Create one Genshin_Draw
     * const Genshin_Draw = await prisma.genshin_Draw.create({
     *   data: {
     *     // ... data to create a Genshin_Draw
     *   }
     * })
     * 
    **/
    create<T extends Genshin_DrawCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Genshin_DrawCreateArgs<ExtArgs>>
    ): Prisma__Genshin_DrawClient<$Result.GetResult<Prisma.$Genshin_DrawPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Genshin_Draws.
     *     @param {Genshin_DrawCreateManyArgs} args - Arguments to create many Genshin_Draws.
     *     @example
     *     // Create many Genshin_Draws
     *     const genshin_Draw = await prisma.genshin_Draw.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Genshin_DrawCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Genshin_DrawCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Genshin_Draw.
     * @param {Genshin_DrawDeleteArgs} args - Arguments to delete one Genshin_Draw.
     * @example
     * // Delete one Genshin_Draw
     * const Genshin_Draw = await prisma.genshin_Draw.delete({
     *   where: {
     *     // ... filter to delete one Genshin_Draw
     *   }
     * })
     * 
    **/
    delete<T extends Genshin_DrawDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Genshin_DrawDeleteArgs<ExtArgs>>
    ): Prisma__Genshin_DrawClient<$Result.GetResult<Prisma.$Genshin_DrawPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Genshin_Draw.
     * @param {Genshin_DrawUpdateArgs} args - Arguments to update one Genshin_Draw.
     * @example
     * // Update one Genshin_Draw
     * const genshin_Draw = await prisma.genshin_Draw.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Genshin_DrawUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Genshin_DrawUpdateArgs<ExtArgs>>
    ): Prisma__Genshin_DrawClient<$Result.GetResult<Prisma.$Genshin_DrawPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Genshin_Draws.
     * @param {Genshin_DrawDeleteManyArgs} args - Arguments to filter Genshin_Draws to delete.
     * @example
     * // Delete a few Genshin_Draws
     * const { count } = await prisma.genshin_Draw.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Genshin_DrawDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Genshin_DrawDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genshin_Draws.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Genshin_DrawUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Genshin_Draws
     * const genshin_Draw = await prisma.genshin_Draw.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Genshin_DrawUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Genshin_DrawUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Genshin_Draw.
     * @param {Genshin_DrawUpsertArgs} args - Arguments to update or create a Genshin_Draw.
     * @example
     * // Update or create a Genshin_Draw
     * const genshin_Draw = await prisma.genshin_Draw.upsert({
     *   create: {
     *     // ... data to create a Genshin_Draw
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Genshin_Draw we want to update
     *   }
     * })
    **/
    upsert<T extends Genshin_DrawUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Genshin_DrawUpsertArgs<ExtArgs>>
    ): Prisma__Genshin_DrawClient<$Result.GetResult<Prisma.$Genshin_DrawPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Genshin_Draws.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Genshin_DrawCountArgs} args - Arguments to filter Genshin_Draws to count.
     * @example
     * // Count the number of Genshin_Draws
     * const count = await prisma.genshin_Draw.count({
     *   where: {
     *     // ... the filter for the Genshin_Draws we want to count
     *   }
     * })
    **/
    count<T extends Genshin_DrawCountArgs>(
      args?: Subset<T, Genshin_DrawCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Genshin_DrawCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Genshin_Draw.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Genshin_DrawAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Genshin_DrawAggregateArgs>(args: Subset<T, Genshin_DrawAggregateArgs>): Prisma.PrismaPromise<GetGenshin_DrawAggregateType<T>>

    /**
     * Group by Genshin_Draw.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Genshin_DrawGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Genshin_DrawGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Genshin_DrawGroupByArgs['orderBy'] }
        : { orderBy?: Genshin_DrawGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Genshin_DrawGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenshin_DrawGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Genshin_Draw model
   */
  readonly fields: Genshin_DrawFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Genshin_Draw.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Genshin_DrawClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Genshin_Draw model
   */ 
  interface Genshin_DrawFieldRefs {
    readonly Wish_Index: FieldRef<"Genshin_Draw", 'Int'>
    readonly Genshin_UID: FieldRef<"Genshin_Draw", 'String'>
    readonly DrawID: FieldRef<"Genshin_Draw", 'String'>
    readonly DrawTime: FieldRef<"Genshin_Draw", 'DateTime'>
    readonly DrawType: FieldRef<"Genshin_Draw", 'String'>
    readonly Item_Name: FieldRef<"Genshin_Draw", 'String'>
    readonly Rarity: FieldRef<"Genshin_Draw", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Genshin_Draw findUnique
   */
  export type Genshin_DrawFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genshin_Draw
     */
    select?: Genshin_DrawSelect<ExtArgs> | null
    /**
     * Filter, which Genshin_Draw to fetch.
     */
    where: Genshin_DrawWhereUniqueInput
  }


  /**
   * Genshin_Draw findUniqueOrThrow
   */
  export type Genshin_DrawFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genshin_Draw
     */
    select?: Genshin_DrawSelect<ExtArgs> | null
    /**
     * Filter, which Genshin_Draw to fetch.
     */
    where: Genshin_DrawWhereUniqueInput
  }


  /**
   * Genshin_Draw findFirst
   */
  export type Genshin_DrawFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genshin_Draw
     */
    select?: Genshin_DrawSelect<ExtArgs> | null
    /**
     * Filter, which Genshin_Draw to fetch.
     */
    where?: Genshin_DrawWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genshin_Draws to fetch.
     */
    orderBy?: Genshin_DrawOrderByWithRelationInput | Genshin_DrawOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genshin_Draws.
     */
    cursor?: Genshin_DrawWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genshin_Draws from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genshin_Draws.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genshin_Draws.
     */
    distinct?: Genshin_DrawScalarFieldEnum | Genshin_DrawScalarFieldEnum[]
  }


  /**
   * Genshin_Draw findFirstOrThrow
   */
  export type Genshin_DrawFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genshin_Draw
     */
    select?: Genshin_DrawSelect<ExtArgs> | null
    /**
     * Filter, which Genshin_Draw to fetch.
     */
    where?: Genshin_DrawWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genshin_Draws to fetch.
     */
    orderBy?: Genshin_DrawOrderByWithRelationInput | Genshin_DrawOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genshin_Draws.
     */
    cursor?: Genshin_DrawWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genshin_Draws from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genshin_Draws.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genshin_Draws.
     */
    distinct?: Genshin_DrawScalarFieldEnum | Genshin_DrawScalarFieldEnum[]
  }


  /**
   * Genshin_Draw findMany
   */
  export type Genshin_DrawFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genshin_Draw
     */
    select?: Genshin_DrawSelect<ExtArgs> | null
    /**
     * Filter, which Genshin_Draws to fetch.
     */
    where?: Genshin_DrawWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genshin_Draws to fetch.
     */
    orderBy?: Genshin_DrawOrderByWithRelationInput | Genshin_DrawOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Genshin_Draws.
     */
    cursor?: Genshin_DrawWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genshin_Draws from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genshin_Draws.
     */
    skip?: number
    distinct?: Genshin_DrawScalarFieldEnum | Genshin_DrawScalarFieldEnum[]
  }


  /**
   * Genshin_Draw create
   */
  export type Genshin_DrawCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genshin_Draw
     */
    select?: Genshin_DrawSelect<ExtArgs> | null
    /**
     * The data needed to create a Genshin_Draw.
     */
    data: XOR<Genshin_DrawCreateInput, Genshin_DrawUncheckedCreateInput>
  }


  /**
   * Genshin_Draw createMany
   */
  export type Genshin_DrawCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Genshin_Draws.
     */
    data: Genshin_DrawCreateManyInput | Genshin_DrawCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Genshin_Draw update
   */
  export type Genshin_DrawUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genshin_Draw
     */
    select?: Genshin_DrawSelect<ExtArgs> | null
    /**
     * The data needed to update a Genshin_Draw.
     */
    data: XOR<Genshin_DrawUpdateInput, Genshin_DrawUncheckedUpdateInput>
    /**
     * Choose, which Genshin_Draw to update.
     */
    where: Genshin_DrawWhereUniqueInput
  }


  /**
   * Genshin_Draw updateMany
   */
  export type Genshin_DrawUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Genshin_Draws.
     */
    data: XOR<Genshin_DrawUpdateManyMutationInput, Genshin_DrawUncheckedUpdateManyInput>
    /**
     * Filter which Genshin_Draws to update
     */
    where?: Genshin_DrawWhereInput
  }


  /**
   * Genshin_Draw upsert
   */
  export type Genshin_DrawUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genshin_Draw
     */
    select?: Genshin_DrawSelect<ExtArgs> | null
    /**
     * The filter to search for the Genshin_Draw to update in case it exists.
     */
    where: Genshin_DrawWhereUniqueInput
    /**
     * In case the Genshin_Draw found by the `where` argument doesn't exist, create a new Genshin_Draw with this data.
     */
    create: XOR<Genshin_DrawCreateInput, Genshin_DrawUncheckedCreateInput>
    /**
     * In case the Genshin_Draw was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Genshin_DrawUpdateInput, Genshin_DrawUncheckedUpdateInput>
  }


  /**
   * Genshin_Draw delete
   */
  export type Genshin_DrawDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genshin_Draw
     */
    select?: Genshin_DrawSelect<ExtArgs> | null
    /**
     * Filter which Genshin_Draw to delete.
     */
    where: Genshin_DrawWhereUniqueInput
  }


  /**
   * Genshin_Draw deleteMany
   */
  export type Genshin_DrawDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Genshin_Draws to delete
     */
    where?: Genshin_DrawWhereInput
  }


  /**
   * Genshin_Draw without action
   */
  export type Genshin_DrawDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genshin_Draw
     */
    select?: Genshin_DrawSelect<ExtArgs> | null
  }



  /**
   * Model StarRail_Draw
   */

  export type AggregateStarRail_Draw = {
    _count: StarRail_DrawCountAggregateOutputType | null
    _avg: StarRail_DrawAvgAggregateOutputType | null
    _sum: StarRail_DrawSumAggregateOutputType | null
    _min: StarRail_DrawMinAggregateOutputType | null
    _max: StarRail_DrawMaxAggregateOutputType | null
  }

  export type StarRail_DrawAvgAggregateOutputType = {
    Wish_Index: number | null
  }

  export type StarRail_DrawSumAggregateOutputType = {
    Wish_Index: number | null
  }

  export type StarRail_DrawMinAggregateOutputType = {
    Wish_Index: number | null
    StarRail_UID: string | null
    DrawID: string | null
    DrawTime: Date | null
    DrawType: string | null
    Item_Name: string | null
    Rarity: string | null
  }

  export type StarRail_DrawMaxAggregateOutputType = {
    Wish_Index: number | null
    StarRail_UID: string | null
    DrawID: string | null
    DrawTime: Date | null
    DrawType: string | null
    Item_Name: string | null
    Rarity: string | null
  }

  export type StarRail_DrawCountAggregateOutputType = {
    Wish_Index: number
    StarRail_UID: number
    DrawID: number
    DrawTime: number
    DrawType: number
    Item_Name: number
    Rarity: number
    _all: number
  }


  export type StarRail_DrawAvgAggregateInputType = {
    Wish_Index?: true
  }

  export type StarRail_DrawSumAggregateInputType = {
    Wish_Index?: true
  }

  export type StarRail_DrawMinAggregateInputType = {
    Wish_Index?: true
    StarRail_UID?: true
    DrawID?: true
    DrawTime?: true
    DrawType?: true
    Item_Name?: true
    Rarity?: true
  }

  export type StarRail_DrawMaxAggregateInputType = {
    Wish_Index?: true
    StarRail_UID?: true
    DrawID?: true
    DrawTime?: true
    DrawType?: true
    Item_Name?: true
    Rarity?: true
  }

  export type StarRail_DrawCountAggregateInputType = {
    Wish_Index?: true
    StarRail_UID?: true
    DrawID?: true
    DrawTime?: true
    DrawType?: true
    Item_Name?: true
    Rarity?: true
    _all?: true
  }

  export type StarRail_DrawAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which StarRail_Draw to aggregate.
     */
    where?: StarRail_DrawWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StarRail_Draws to fetch.
     */
    orderBy?: StarRail_DrawOrderByWithRelationInput | StarRail_DrawOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StarRail_DrawWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StarRail_Draws from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StarRail_Draws.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StarRail_Draws
    **/
    _count?: true | StarRail_DrawCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StarRail_DrawAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StarRail_DrawSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StarRail_DrawMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StarRail_DrawMaxAggregateInputType
  }

  export type GetStarRail_DrawAggregateType<T extends StarRail_DrawAggregateArgs> = {
        [P in keyof T & keyof AggregateStarRail_Draw]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStarRail_Draw[P]>
      : GetScalarType<T[P], AggregateStarRail_Draw[P]>
  }




  export type StarRail_DrawGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: StarRail_DrawWhereInput
    orderBy?: StarRail_DrawOrderByWithAggregationInput | StarRail_DrawOrderByWithAggregationInput[]
    by: StarRail_DrawScalarFieldEnum[] | StarRail_DrawScalarFieldEnum
    having?: StarRail_DrawScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StarRail_DrawCountAggregateInputType | true
    _avg?: StarRail_DrawAvgAggregateInputType
    _sum?: StarRail_DrawSumAggregateInputType
    _min?: StarRail_DrawMinAggregateInputType
    _max?: StarRail_DrawMaxAggregateInputType
  }

  export type StarRail_DrawGroupByOutputType = {
    Wish_Index: number
    StarRail_UID: string
    DrawID: string
    DrawTime: Date
    DrawType: string
    Item_Name: string
    Rarity: string
    _count: StarRail_DrawCountAggregateOutputType | null
    _avg: StarRail_DrawAvgAggregateOutputType | null
    _sum: StarRail_DrawSumAggregateOutputType | null
    _min: StarRail_DrawMinAggregateOutputType | null
    _max: StarRail_DrawMaxAggregateOutputType | null
  }

  type GetStarRail_DrawGroupByPayload<T extends StarRail_DrawGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StarRail_DrawGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StarRail_DrawGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StarRail_DrawGroupByOutputType[P]>
            : GetScalarType<T[P], StarRail_DrawGroupByOutputType[P]>
        }
      >
    >


  export type StarRail_DrawSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Wish_Index?: boolean
    StarRail_UID?: boolean
    DrawID?: boolean
    DrawTime?: boolean
    DrawType?: boolean
    Item_Name?: boolean
    Rarity?: boolean
  }, ExtArgs["result"]["starRail_Draw"]>

  export type StarRail_DrawSelectScalar = {
    Wish_Index?: boolean
    StarRail_UID?: boolean
    DrawID?: boolean
    DrawTime?: boolean
    DrawType?: boolean
    Item_Name?: boolean
    Rarity?: boolean
  }


  export type $StarRail_DrawPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "StarRail_Draw"
    objects: {}
    scalars: $Extensions.GetResult<{
      Wish_Index: number
      StarRail_UID: string
      DrawID: string
      DrawTime: Date
      DrawType: string
      Item_Name: string
      Rarity: string
    }, ExtArgs["result"]["starRail_Draw"]>
    composites: {}
  }


  type StarRail_DrawGetPayload<S extends boolean | null | undefined | StarRail_DrawDefaultArgs> = $Result.GetResult<Prisma.$StarRail_DrawPayload, S>

  type StarRail_DrawCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<StarRail_DrawFindManyArgs, 'select' | 'include'> & {
      select?: StarRail_DrawCountAggregateInputType | true
    }

  export interface StarRail_DrawDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StarRail_Draw'], meta: { name: 'StarRail_Draw' } }
    /**
     * Find zero or one StarRail_Draw that matches the filter.
     * @param {StarRail_DrawFindUniqueArgs} args - Arguments to find a StarRail_Draw
     * @example
     * // Get one StarRail_Draw
     * const starRail_Draw = await prisma.starRail_Draw.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StarRail_DrawFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StarRail_DrawFindUniqueArgs<ExtArgs>>
    ): Prisma__StarRail_DrawClient<$Result.GetResult<Prisma.$StarRail_DrawPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StarRail_Draw that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StarRail_DrawFindUniqueOrThrowArgs} args - Arguments to find a StarRail_Draw
     * @example
     * // Get one StarRail_Draw
     * const starRail_Draw = await prisma.starRail_Draw.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StarRail_DrawFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StarRail_DrawFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StarRail_DrawClient<$Result.GetResult<Prisma.$StarRail_DrawPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StarRail_Draw that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarRail_DrawFindFirstArgs} args - Arguments to find a StarRail_Draw
     * @example
     * // Get one StarRail_Draw
     * const starRail_Draw = await prisma.starRail_Draw.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StarRail_DrawFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StarRail_DrawFindFirstArgs<ExtArgs>>
    ): Prisma__StarRail_DrawClient<$Result.GetResult<Prisma.$StarRail_DrawPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StarRail_Draw that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarRail_DrawFindFirstOrThrowArgs} args - Arguments to find a StarRail_Draw
     * @example
     * // Get one StarRail_Draw
     * const starRail_Draw = await prisma.starRail_Draw.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StarRail_DrawFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StarRail_DrawFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StarRail_DrawClient<$Result.GetResult<Prisma.$StarRail_DrawPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StarRail_Draws that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarRail_DrawFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StarRail_Draws
     * const starRail_Draws = await prisma.starRail_Draw.findMany()
     * 
     * // Get first 10 StarRail_Draws
     * const starRail_Draws = await prisma.starRail_Draw.findMany({ take: 10 })
     * 
     * // Only select the `Wish_Index`
     * const starRail_DrawWithWish_IndexOnly = await prisma.starRail_Draw.findMany({ select: { Wish_Index: true } })
     * 
    **/
    findMany<T extends StarRail_DrawFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StarRail_DrawFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StarRail_DrawPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StarRail_Draw.
     * @param {StarRail_DrawCreateArgs} args - Arguments to create a StarRail_Draw.
     * @example
     * // Create one StarRail_Draw
     * const StarRail_Draw = await prisma.starRail_Draw.create({
     *   data: {
     *     // ... data to create a StarRail_Draw
     *   }
     * })
     * 
    **/
    create<T extends StarRail_DrawCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StarRail_DrawCreateArgs<ExtArgs>>
    ): Prisma__StarRail_DrawClient<$Result.GetResult<Prisma.$StarRail_DrawPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StarRail_Draws.
     *     @param {StarRail_DrawCreateManyArgs} args - Arguments to create many StarRail_Draws.
     *     @example
     *     // Create many StarRail_Draws
     *     const starRail_Draw = await prisma.starRail_Draw.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StarRail_DrawCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StarRail_DrawCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StarRail_Draw.
     * @param {StarRail_DrawDeleteArgs} args - Arguments to delete one StarRail_Draw.
     * @example
     * // Delete one StarRail_Draw
     * const StarRail_Draw = await prisma.starRail_Draw.delete({
     *   where: {
     *     // ... filter to delete one StarRail_Draw
     *   }
     * })
     * 
    **/
    delete<T extends StarRail_DrawDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StarRail_DrawDeleteArgs<ExtArgs>>
    ): Prisma__StarRail_DrawClient<$Result.GetResult<Prisma.$StarRail_DrawPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StarRail_Draw.
     * @param {StarRail_DrawUpdateArgs} args - Arguments to update one StarRail_Draw.
     * @example
     * // Update one StarRail_Draw
     * const starRail_Draw = await prisma.starRail_Draw.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StarRail_DrawUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StarRail_DrawUpdateArgs<ExtArgs>>
    ): Prisma__StarRail_DrawClient<$Result.GetResult<Prisma.$StarRail_DrawPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StarRail_Draws.
     * @param {StarRail_DrawDeleteManyArgs} args - Arguments to filter StarRail_Draws to delete.
     * @example
     * // Delete a few StarRail_Draws
     * const { count } = await prisma.starRail_Draw.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StarRail_DrawDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StarRail_DrawDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StarRail_Draws.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarRail_DrawUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StarRail_Draws
     * const starRail_Draw = await prisma.starRail_Draw.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StarRail_DrawUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StarRail_DrawUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StarRail_Draw.
     * @param {StarRail_DrawUpsertArgs} args - Arguments to update or create a StarRail_Draw.
     * @example
     * // Update or create a StarRail_Draw
     * const starRail_Draw = await prisma.starRail_Draw.upsert({
     *   create: {
     *     // ... data to create a StarRail_Draw
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StarRail_Draw we want to update
     *   }
     * })
    **/
    upsert<T extends StarRail_DrawUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StarRail_DrawUpsertArgs<ExtArgs>>
    ): Prisma__StarRail_DrawClient<$Result.GetResult<Prisma.$StarRail_DrawPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StarRail_Draws.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarRail_DrawCountArgs} args - Arguments to filter StarRail_Draws to count.
     * @example
     * // Count the number of StarRail_Draws
     * const count = await prisma.starRail_Draw.count({
     *   where: {
     *     // ... the filter for the StarRail_Draws we want to count
     *   }
     * })
    **/
    count<T extends StarRail_DrawCountArgs>(
      args?: Subset<T, StarRail_DrawCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StarRail_DrawCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StarRail_Draw.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarRail_DrawAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StarRail_DrawAggregateArgs>(args: Subset<T, StarRail_DrawAggregateArgs>): Prisma.PrismaPromise<GetStarRail_DrawAggregateType<T>>

    /**
     * Group by StarRail_Draw.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StarRail_DrawGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StarRail_DrawGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StarRail_DrawGroupByArgs['orderBy'] }
        : { orderBy?: StarRail_DrawGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StarRail_DrawGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStarRail_DrawGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StarRail_Draw model
   */
  readonly fields: StarRail_DrawFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StarRail_Draw.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StarRail_DrawClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StarRail_Draw model
   */ 
  interface StarRail_DrawFieldRefs {
    readonly Wish_Index: FieldRef<"StarRail_Draw", 'Int'>
    readonly StarRail_UID: FieldRef<"StarRail_Draw", 'String'>
    readonly DrawID: FieldRef<"StarRail_Draw", 'String'>
    readonly DrawTime: FieldRef<"StarRail_Draw", 'DateTime'>
    readonly DrawType: FieldRef<"StarRail_Draw", 'String'>
    readonly Item_Name: FieldRef<"StarRail_Draw", 'String'>
    readonly Rarity: FieldRef<"StarRail_Draw", 'String'>
  }
    

  // Custom InputTypes

  /**
   * StarRail_Draw findUnique
   */
  export type StarRail_DrawFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StarRail_Draw
     */
    select?: StarRail_DrawSelect<ExtArgs> | null
    /**
     * Filter, which StarRail_Draw to fetch.
     */
    where: StarRail_DrawWhereUniqueInput
  }


  /**
   * StarRail_Draw findUniqueOrThrow
   */
  export type StarRail_DrawFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StarRail_Draw
     */
    select?: StarRail_DrawSelect<ExtArgs> | null
    /**
     * Filter, which StarRail_Draw to fetch.
     */
    where: StarRail_DrawWhereUniqueInput
  }


  /**
   * StarRail_Draw findFirst
   */
  export type StarRail_DrawFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StarRail_Draw
     */
    select?: StarRail_DrawSelect<ExtArgs> | null
    /**
     * Filter, which StarRail_Draw to fetch.
     */
    where?: StarRail_DrawWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StarRail_Draws to fetch.
     */
    orderBy?: StarRail_DrawOrderByWithRelationInput | StarRail_DrawOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StarRail_Draws.
     */
    cursor?: StarRail_DrawWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StarRail_Draws from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StarRail_Draws.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StarRail_Draws.
     */
    distinct?: StarRail_DrawScalarFieldEnum | StarRail_DrawScalarFieldEnum[]
  }


  /**
   * StarRail_Draw findFirstOrThrow
   */
  export type StarRail_DrawFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StarRail_Draw
     */
    select?: StarRail_DrawSelect<ExtArgs> | null
    /**
     * Filter, which StarRail_Draw to fetch.
     */
    where?: StarRail_DrawWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StarRail_Draws to fetch.
     */
    orderBy?: StarRail_DrawOrderByWithRelationInput | StarRail_DrawOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StarRail_Draws.
     */
    cursor?: StarRail_DrawWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StarRail_Draws from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StarRail_Draws.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StarRail_Draws.
     */
    distinct?: StarRail_DrawScalarFieldEnum | StarRail_DrawScalarFieldEnum[]
  }


  /**
   * StarRail_Draw findMany
   */
  export type StarRail_DrawFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StarRail_Draw
     */
    select?: StarRail_DrawSelect<ExtArgs> | null
    /**
     * Filter, which StarRail_Draws to fetch.
     */
    where?: StarRail_DrawWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StarRail_Draws to fetch.
     */
    orderBy?: StarRail_DrawOrderByWithRelationInput | StarRail_DrawOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StarRail_Draws.
     */
    cursor?: StarRail_DrawWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StarRail_Draws from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StarRail_Draws.
     */
    skip?: number
    distinct?: StarRail_DrawScalarFieldEnum | StarRail_DrawScalarFieldEnum[]
  }


  /**
   * StarRail_Draw create
   */
  export type StarRail_DrawCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StarRail_Draw
     */
    select?: StarRail_DrawSelect<ExtArgs> | null
    /**
     * The data needed to create a StarRail_Draw.
     */
    data: XOR<StarRail_DrawCreateInput, StarRail_DrawUncheckedCreateInput>
  }


  /**
   * StarRail_Draw createMany
   */
  export type StarRail_DrawCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StarRail_Draws.
     */
    data: StarRail_DrawCreateManyInput | StarRail_DrawCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * StarRail_Draw update
   */
  export type StarRail_DrawUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StarRail_Draw
     */
    select?: StarRail_DrawSelect<ExtArgs> | null
    /**
     * The data needed to update a StarRail_Draw.
     */
    data: XOR<StarRail_DrawUpdateInput, StarRail_DrawUncheckedUpdateInput>
    /**
     * Choose, which StarRail_Draw to update.
     */
    where: StarRail_DrawWhereUniqueInput
  }


  /**
   * StarRail_Draw updateMany
   */
  export type StarRail_DrawUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StarRail_Draws.
     */
    data: XOR<StarRail_DrawUpdateManyMutationInput, StarRail_DrawUncheckedUpdateManyInput>
    /**
     * Filter which StarRail_Draws to update
     */
    where?: StarRail_DrawWhereInput
  }


  /**
   * StarRail_Draw upsert
   */
  export type StarRail_DrawUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StarRail_Draw
     */
    select?: StarRail_DrawSelect<ExtArgs> | null
    /**
     * The filter to search for the StarRail_Draw to update in case it exists.
     */
    where: StarRail_DrawWhereUniqueInput
    /**
     * In case the StarRail_Draw found by the `where` argument doesn't exist, create a new StarRail_Draw with this data.
     */
    create: XOR<StarRail_DrawCreateInput, StarRail_DrawUncheckedCreateInput>
    /**
     * In case the StarRail_Draw was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StarRail_DrawUpdateInput, StarRail_DrawUncheckedUpdateInput>
  }


  /**
   * StarRail_Draw delete
   */
  export type StarRail_DrawDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StarRail_Draw
     */
    select?: StarRail_DrawSelect<ExtArgs> | null
    /**
     * Filter which StarRail_Draw to delete.
     */
    where: StarRail_DrawWhereUniqueInput
  }


  /**
   * StarRail_Draw deleteMany
   */
  export type StarRail_DrawDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which StarRail_Draws to delete
     */
    where?: StarRail_DrawWhereInput
  }


  /**
   * StarRail_Draw without action
   */
  export type StarRail_DrawDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StarRail_Draw
     */
    select?: StarRail_DrawSelect<ExtArgs> | null
  }



  /**
   * Model SummaryTable
   */

  export type AggregateSummaryTable = {
    _count: SummaryTableCountAggregateOutputType | null
    _avg: SummaryTableAvgAggregateOutputType | null
    _sum: SummaryTableSumAggregateOutputType | null
    _min: SummaryTableMinAggregateOutputType | null
    _max: SummaryTableMaxAggregateOutputType | null
  }

  export type SummaryTableAvgAggregateOutputType = {
    Summary_Table_Index: number | null
    total_items: number | null
  }

  export type SummaryTableSumAggregateOutputType = {
    Summary_Table_Index: number | null
    total_items: number | null
  }

  export type SummaryTableMinAggregateOutputType = {
    Summary_Table_Index: number | null
    Game_UID: string | null
    total_items: number | null
  }

  export type SummaryTableMaxAggregateOutputType = {
    Summary_Table_Index: number | null
    Game_UID: string | null
    total_items: number | null
  }

  export type SummaryTableCountAggregateOutputType = {
    Summary_Table_Index: number
    Game_UID: number
    total_items: number
    _all: number
  }


  export type SummaryTableAvgAggregateInputType = {
    Summary_Table_Index?: true
    total_items?: true
  }

  export type SummaryTableSumAggregateInputType = {
    Summary_Table_Index?: true
    total_items?: true
  }

  export type SummaryTableMinAggregateInputType = {
    Summary_Table_Index?: true
    Game_UID?: true
    total_items?: true
  }

  export type SummaryTableMaxAggregateInputType = {
    Summary_Table_Index?: true
    Game_UID?: true
    total_items?: true
  }

  export type SummaryTableCountAggregateInputType = {
    Summary_Table_Index?: true
    Game_UID?: true
    total_items?: true
    _all?: true
  }

  export type SummaryTableAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SummaryTable to aggregate.
     */
    where?: SummaryTableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SummaryTables to fetch.
     */
    orderBy?: SummaryTableOrderByWithRelationInput | SummaryTableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SummaryTableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SummaryTables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SummaryTables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SummaryTables
    **/
    _count?: true | SummaryTableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SummaryTableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SummaryTableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SummaryTableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SummaryTableMaxAggregateInputType
  }

  export type GetSummaryTableAggregateType<T extends SummaryTableAggregateArgs> = {
        [P in keyof T & keyof AggregateSummaryTable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSummaryTable[P]>
      : GetScalarType<T[P], AggregateSummaryTable[P]>
  }




  export type SummaryTableGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SummaryTableWhereInput
    orderBy?: SummaryTableOrderByWithAggregationInput | SummaryTableOrderByWithAggregationInput[]
    by: SummaryTableScalarFieldEnum[] | SummaryTableScalarFieldEnum
    having?: SummaryTableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SummaryTableCountAggregateInputType | true
    _avg?: SummaryTableAvgAggregateInputType
    _sum?: SummaryTableSumAggregateInputType
    _min?: SummaryTableMinAggregateInputType
    _max?: SummaryTableMaxAggregateInputType
  }

  export type SummaryTableGroupByOutputType = {
    Summary_Table_Index: number
    Game_UID: string | null
    total_items: number | null
    _count: SummaryTableCountAggregateOutputType | null
    _avg: SummaryTableAvgAggregateOutputType | null
    _sum: SummaryTableSumAggregateOutputType | null
    _min: SummaryTableMinAggregateOutputType | null
    _max: SummaryTableMaxAggregateOutputType | null
  }

  type GetSummaryTableGroupByPayload<T extends SummaryTableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SummaryTableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SummaryTableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SummaryTableGroupByOutputType[P]>
            : GetScalarType<T[P], SummaryTableGroupByOutputType[P]>
        }
      >
    >


  export type SummaryTableSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Summary_Table_Index?: boolean
    Game_UID?: boolean
    total_items?: boolean
  }, ExtArgs["result"]["summaryTable"]>

  export type SummaryTableSelectScalar = {
    Summary_Table_Index?: boolean
    Game_UID?: boolean
    total_items?: boolean
  }


  export type $SummaryTablePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "SummaryTable"
    objects: {}
    scalars: $Extensions.GetResult<{
      Summary_Table_Index: number
      Game_UID: string | null
      total_items: number | null
    }, ExtArgs["result"]["summaryTable"]>
    composites: {}
  }


  type SummaryTableGetPayload<S extends boolean | null | undefined | SummaryTableDefaultArgs> = $Result.GetResult<Prisma.$SummaryTablePayload, S>

  type SummaryTableCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SummaryTableFindManyArgs, 'select' | 'include'> & {
      select?: SummaryTableCountAggregateInputType | true
    }

  export interface SummaryTableDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SummaryTable'], meta: { name: 'SummaryTable' } }
    /**
     * Find zero or one SummaryTable that matches the filter.
     * @param {SummaryTableFindUniqueArgs} args - Arguments to find a SummaryTable
     * @example
     * // Get one SummaryTable
     * const summaryTable = await prisma.summaryTable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SummaryTableFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SummaryTableFindUniqueArgs<ExtArgs>>
    ): Prisma__SummaryTableClient<$Result.GetResult<Prisma.$SummaryTablePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SummaryTable that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SummaryTableFindUniqueOrThrowArgs} args - Arguments to find a SummaryTable
     * @example
     * // Get one SummaryTable
     * const summaryTable = await prisma.summaryTable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SummaryTableFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SummaryTableFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SummaryTableClient<$Result.GetResult<Prisma.$SummaryTablePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SummaryTable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryTableFindFirstArgs} args - Arguments to find a SummaryTable
     * @example
     * // Get one SummaryTable
     * const summaryTable = await prisma.summaryTable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SummaryTableFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SummaryTableFindFirstArgs<ExtArgs>>
    ): Prisma__SummaryTableClient<$Result.GetResult<Prisma.$SummaryTablePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SummaryTable that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryTableFindFirstOrThrowArgs} args - Arguments to find a SummaryTable
     * @example
     * // Get one SummaryTable
     * const summaryTable = await prisma.summaryTable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SummaryTableFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SummaryTableFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SummaryTableClient<$Result.GetResult<Prisma.$SummaryTablePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SummaryTables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryTableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SummaryTables
     * const summaryTables = await prisma.summaryTable.findMany()
     * 
     * // Get first 10 SummaryTables
     * const summaryTables = await prisma.summaryTable.findMany({ take: 10 })
     * 
     * // Only select the `Summary_Table_Index`
     * const summaryTableWithSummary_Table_IndexOnly = await prisma.summaryTable.findMany({ select: { Summary_Table_Index: true } })
     * 
    **/
    findMany<T extends SummaryTableFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SummaryTableFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SummaryTablePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SummaryTable.
     * @param {SummaryTableCreateArgs} args - Arguments to create a SummaryTable.
     * @example
     * // Create one SummaryTable
     * const SummaryTable = await prisma.summaryTable.create({
     *   data: {
     *     // ... data to create a SummaryTable
     *   }
     * })
     * 
    **/
    create<T extends SummaryTableCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SummaryTableCreateArgs<ExtArgs>>
    ): Prisma__SummaryTableClient<$Result.GetResult<Prisma.$SummaryTablePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SummaryTables.
     *     @param {SummaryTableCreateManyArgs} args - Arguments to create many SummaryTables.
     *     @example
     *     // Create many SummaryTables
     *     const summaryTable = await prisma.summaryTable.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SummaryTableCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SummaryTableCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SummaryTable.
     * @param {SummaryTableDeleteArgs} args - Arguments to delete one SummaryTable.
     * @example
     * // Delete one SummaryTable
     * const SummaryTable = await prisma.summaryTable.delete({
     *   where: {
     *     // ... filter to delete one SummaryTable
     *   }
     * })
     * 
    **/
    delete<T extends SummaryTableDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SummaryTableDeleteArgs<ExtArgs>>
    ): Prisma__SummaryTableClient<$Result.GetResult<Prisma.$SummaryTablePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SummaryTable.
     * @param {SummaryTableUpdateArgs} args - Arguments to update one SummaryTable.
     * @example
     * // Update one SummaryTable
     * const summaryTable = await prisma.summaryTable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SummaryTableUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SummaryTableUpdateArgs<ExtArgs>>
    ): Prisma__SummaryTableClient<$Result.GetResult<Prisma.$SummaryTablePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SummaryTables.
     * @param {SummaryTableDeleteManyArgs} args - Arguments to filter SummaryTables to delete.
     * @example
     * // Delete a few SummaryTables
     * const { count } = await prisma.summaryTable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SummaryTableDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SummaryTableDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SummaryTables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryTableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SummaryTables
     * const summaryTable = await prisma.summaryTable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SummaryTableUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SummaryTableUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SummaryTable.
     * @param {SummaryTableUpsertArgs} args - Arguments to update or create a SummaryTable.
     * @example
     * // Update or create a SummaryTable
     * const summaryTable = await prisma.summaryTable.upsert({
     *   create: {
     *     // ... data to create a SummaryTable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SummaryTable we want to update
     *   }
     * })
    **/
    upsert<T extends SummaryTableUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SummaryTableUpsertArgs<ExtArgs>>
    ): Prisma__SummaryTableClient<$Result.GetResult<Prisma.$SummaryTablePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SummaryTables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryTableCountArgs} args - Arguments to filter SummaryTables to count.
     * @example
     * // Count the number of SummaryTables
     * const count = await prisma.summaryTable.count({
     *   where: {
     *     // ... the filter for the SummaryTables we want to count
     *   }
     * })
    **/
    count<T extends SummaryTableCountArgs>(
      args?: Subset<T, SummaryTableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SummaryTableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SummaryTable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryTableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SummaryTableAggregateArgs>(args: Subset<T, SummaryTableAggregateArgs>): Prisma.PrismaPromise<GetSummaryTableAggregateType<T>>

    /**
     * Group by SummaryTable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryTableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SummaryTableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SummaryTableGroupByArgs['orderBy'] }
        : { orderBy?: SummaryTableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SummaryTableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSummaryTableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SummaryTable model
   */
  readonly fields: SummaryTableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SummaryTable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SummaryTableClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SummaryTable model
   */ 
  interface SummaryTableFieldRefs {
    readonly Summary_Table_Index: FieldRef<"SummaryTable", 'Int'>
    readonly Game_UID: FieldRef<"SummaryTable", 'String'>
    readonly total_items: FieldRef<"SummaryTable", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * SummaryTable findUnique
   */
  export type SummaryTableFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SummaryTable
     */
    select?: SummaryTableSelect<ExtArgs> | null
    /**
     * Filter, which SummaryTable to fetch.
     */
    where: SummaryTableWhereUniqueInput
  }


  /**
   * SummaryTable findUniqueOrThrow
   */
  export type SummaryTableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SummaryTable
     */
    select?: SummaryTableSelect<ExtArgs> | null
    /**
     * Filter, which SummaryTable to fetch.
     */
    where: SummaryTableWhereUniqueInput
  }


  /**
   * SummaryTable findFirst
   */
  export type SummaryTableFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SummaryTable
     */
    select?: SummaryTableSelect<ExtArgs> | null
    /**
     * Filter, which SummaryTable to fetch.
     */
    where?: SummaryTableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SummaryTables to fetch.
     */
    orderBy?: SummaryTableOrderByWithRelationInput | SummaryTableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SummaryTables.
     */
    cursor?: SummaryTableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SummaryTables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SummaryTables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SummaryTables.
     */
    distinct?: SummaryTableScalarFieldEnum | SummaryTableScalarFieldEnum[]
  }


  /**
   * SummaryTable findFirstOrThrow
   */
  export type SummaryTableFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SummaryTable
     */
    select?: SummaryTableSelect<ExtArgs> | null
    /**
     * Filter, which SummaryTable to fetch.
     */
    where?: SummaryTableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SummaryTables to fetch.
     */
    orderBy?: SummaryTableOrderByWithRelationInput | SummaryTableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SummaryTables.
     */
    cursor?: SummaryTableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SummaryTables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SummaryTables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SummaryTables.
     */
    distinct?: SummaryTableScalarFieldEnum | SummaryTableScalarFieldEnum[]
  }


  /**
   * SummaryTable findMany
   */
  export type SummaryTableFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SummaryTable
     */
    select?: SummaryTableSelect<ExtArgs> | null
    /**
     * Filter, which SummaryTables to fetch.
     */
    where?: SummaryTableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SummaryTables to fetch.
     */
    orderBy?: SummaryTableOrderByWithRelationInput | SummaryTableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SummaryTables.
     */
    cursor?: SummaryTableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SummaryTables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SummaryTables.
     */
    skip?: number
    distinct?: SummaryTableScalarFieldEnum | SummaryTableScalarFieldEnum[]
  }


  /**
   * SummaryTable create
   */
  export type SummaryTableCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SummaryTable
     */
    select?: SummaryTableSelect<ExtArgs> | null
    /**
     * The data needed to create a SummaryTable.
     */
    data?: XOR<SummaryTableCreateInput, SummaryTableUncheckedCreateInput>
  }


  /**
   * SummaryTable createMany
   */
  export type SummaryTableCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SummaryTables.
     */
    data: SummaryTableCreateManyInput | SummaryTableCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SummaryTable update
   */
  export type SummaryTableUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SummaryTable
     */
    select?: SummaryTableSelect<ExtArgs> | null
    /**
     * The data needed to update a SummaryTable.
     */
    data: XOR<SummaryTableUpdateInput, SummaryTableUncheckedUpdateInput>
    /**
     * Choose, which SummaryTable to update.
     */
    where: SummaryTableWhereUniqueInput
  }


  /**
   * SummaryTable updateMany
   */
  export type SummaryTableUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SummaryTables.
     */
    data: XOR<SummaryTableUpdateManyMutationInput, SummaryTableUncheckedUpdateManyInput>
    /**
     * Filter which SummaryTables to update
     */
    where?: SummaryTableWhereInput
  }


  /**
   * SummaryTable upsert
   */
  export type SummaryTableUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SummaryTable
     */
    select?: SummaryTableSelect<ExtArgs> | null
    /**
     * The filter to search for the SummaryTable to update in case it exists.
     */
    where: SummaryTableWhereUniqueInput
    /**
     * In case the SummaryTable found by the `where` argument doesn't exist, create a new SummaryTable with this data.
     */
    create: XOR<SummaryTableCreateInput, SummaryTableUncheckedCreateInput>
    /**
     * In case the SummaryTable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SummaryTableUpdateInput, SummaryTableUncheckedUpdateInput>
  }


  /**
   * SummaryTable delete
   */
  export type SummaryTableDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SummaryTable
     */
    select?: SummaryTableSelect<ExtArgs> | null
    /**
     * Filter which SummaryTable to delete.
     */
    where: SummaryTableWhereUniqueInput
  }


  /**
   * SummaryTable deleteMany
   */
  export type SummaryTableDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SummaryTables to delete
     */
    where?: SummaryTableWhereInput
  }


  /**
   * SummaryTable without action
   */
  export type SummaryTableDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SummaryTable
     */
    select?: SummaryTableSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const API_UsageScalarFieldEnum: {
    API_Index: 'API_Index',
    API_Name: 'API_Name',
    API_Last_Used: 'API_Last_Used'
  };

  export type API_UsageScalarFieldEnum = (typeof API_UsageScalarFieldEnum)[keyof typeof API_UsageScalarFieldEnum]


  export const BannersScalarFieldEnum: {
    Banner_Index: 'Banner_Index',
    Game_ID: 'Game_ID',
    Banner_Path: 'Banner_Path',
    Banner_Start: 'Banner_Start',
    Banner_End: 'Banner_End',
    Banner_RateUps: 'Banner_RateUps'
  };

  export type BannersScalarFieldEnum = (typeof BannersScalarFieldEnum)[keyof typeof BannersScalarFieldEnum]


  export const Character_BirthdaysScalarFieldEnum: {
    Character_Index: 'Character_Index',
    Game_ID: 'Game_ID',
    Character_Name: 'Character_Name',
    Character_Birthday: 'Character_Birthday'
  };

  export type Character_BirthdaysScalarFieldEnum = (typeof Character_BirthdaysScalarFieldEnum)[keyof typeof Character_BirthdaysScalarFieldEnum]


  export const CodesScalarFieldEnum: {
    Code_Index: 'Code_Index',
    Game_ID: 'Game_ID',
    Code_Code: 'Code_Code',
    Code_Rewards: 'Code_Rewards',
    Code_End: 'Code_End'
  };

  export type CodesScalarFieldEnum = (typeof CodesScalarFieldEnum)[keyof typeof CodesScalarFieldEnum]


  export const EventsScalarFieldEnum: {
    Event_Index: 'Event_Index',
    Game_ID: 'Game_ID',
    Event_Name: 'Event_Name',
    Event_Start: 'Event_Start',
    Event_End: 'Event_End',
    Event_Image: 'Event_Image'
  };

  export type EventsScalarFieldEnum = (typeof EventsScalarFieldEnum)[keyof typeof EventsScalarFieldEnum]


  export const Game_GeneralScalarFieldEnum: {
    Game_ID: 'Game_ID',
    Game_Name: 'Game_Name'
  };

  export type Game_GeneralScalarFieldEnum = (typeof Game_GeneralScalarFieldEnum)[keyof typeof Game_GeneralScalarFieldEnum]


  export const Games_UsersScalarFieldEnum: {
    UID: 'UID',
    Genshin_UID: 'Genshin_UID',
    StarRail_UID: 'StarRail_UID'
  };

  export type Games_UsersScalarFieldEnum = (typeof Games_UsersScalarFieldEnum)[keyof typeof Games_UsersScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    UID: 'UID',
    Username: 'Username',
    Password_Hash: 'Password_Hash',
    Email: 'Email',
    Registration_Date: 'Registration_Date',
    Last_Login: 'Last_Login'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const Genshin_DrawScalarFieldEnum: {
    Wish_Index: 'Wish_Index',
    Genshin_UID: 'Genshin_UID',
    DrawID: 'DrawID',
    DrawTime: 'DrawTime',
    DrawType: 'DrawType',
    Item_Name: 'Item_Name',
    Rarity: 'Rarity'
  };

  export type Genshin_DrawScalarFieldEnum = (typeof Genshin_DrawScalarFieldEnum)[keyof typeof Genshin_DrawScalarFieldEnum]


  export const StarRail_DrawScalarFieldEnum: {
    Wish_Index: 'Wish_Index',
    StarRail_UID: 'StarRail_UID',
    DrawID: 'DrawID',
    DrawTime: 'DrawTime',
    DrawType: 'DrawType',
    Item_Name: 'Item_Name',
    Rarity: 'Rarity'
  };

  export type StarRail_DrawScalarFieldEnum = (typeof StarRail_DrawScalarFieldEnum)[keyof typeof StarRail_DrawScalarFieldEnum]


  export const SummaryTableScalarFieldEnum: {
    Summary_Table_Index: 'Summary_Table_Index',
    Game_UID: 'Game_UID',
    total_items: 'total_items'
  };

  export type SummaryTableScalarFieldEnum = (typeof SummaryTableScalarFieldEnum)[keyof typeof SummaryTableScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type API_UsageWhereInput = {
    AND?: API_UsageWhereInput | API_UsageWhereInput[]
    OR?: API_UsageWhereInput[]
    NOT?: API_UsageWhereInput | API_UsageWhereInput[]
    API_Index?: IntFilter<"API_Usage"> | number
    API_Name?: StringFilter<"API_Usage"> | string
    API_Last_Used?: DateTimeFilter<"API_Usage"> | Date | string
  }

  export type API_UsageOrderByWithRelationInput = {
    API_Index?: SortOrder
    API_Name?: SortOrder
    API_Last_Used?: SortOrder
  }

  export type API_UsageWhereUniqueInput = Prisma.AtLeast<{
    API_Index?: number
    AND?: API_UsageWhereInput | API_UsageWhereInput[]
    OR?: API_UsageWhereInput[]
    NOT?: API_UsageWhereInput | API_UsageWhereInput[]
    API_Name?: StringFilter<"API_Usage"> | string
    API_Last_Used?: DateTimeFilter<"API_Usage"> | Date | string
  }, "API_Index">

  export type API_UsageOrderByWithAggregationInput = {
    API_Index?: SortOrder
    API_Name?: SortOrder
    API_Last_Used?: SortOrder
    _count?: API_UsageCountOrderByAggregateInput
    _avg?: API_UsageAvgOrderByAggregateInput
    _max?: API_UsageMaxOrderByAggregateInput
    _min?: API_UsageMinOrderByAggregateInput
    _sum?: API_UsageSumOrderByAggregateInput
  }

  export type API_UsageScalarWhereWithAggregatesInput = {
    AND?: API_UsageScalarWhereWithAggregatesInput | API_UsageScalarWhereWithAggregatesInput[]
    OR?: API_UsageScalarWhereWithAggregatesInput[]
    NOT?: API_UsageScalarWhereWithAggregatesInput | API_UsageScalarWhereWithAggregatesInput[]
    API_Index?: IntWithAggregatesFilter<"API_Usage"> | number
    API_Name?: StringWithAggregatesFilter<"API_Usage"> | string
    API_Last_Used?: DateTimeWithAggregatesFilter<"API_Usage"> | Date | string
  }

  export type BannersWhereInput = {
    AND?: BannersWhereInput | BannersWhereInput[]
    OR?: BannersWhereInput[]
    NOT?: BannersWhereInput | BannersWhereInput[]
    Banner_Index?: IntFilter<"Banners"> | number
    Game_ID?: IntFilter<"Banners"> | number
    Banner_Path?: StringFilter<"Banners"> | string
    Banner_Start?: DateTimeFilter<"Banners"> | Date | string
    Banner_End?: DateTimeNullableFilter<"Banners"> | Date | string | null
    Banner_RateUps?: StringFilter<"Banners"> | string
  }

  export type BannersOrderByWithRelationInput = {
    Banner_Index?: SortOrder
    Game_ID?: SortOrder
    Banner_Path?: SortOrder
    Banner_Start?: SortOrder
    Banner_End?: SortOrderInput | SortOrder
    Banner_RateUps?: SortOrder
  }

  export type BannersWhereUniqueInput = Prisma.AtLeast<{
    Banner_Index?: number
    AND?: BannersWhereInput | BannersWhereInput[]
    OR?: BannersWhereInput[]
    NOT?: BannersWhereInput | BannersWhereInput[]
    Game_ID?: IntFilter<"Banners"> | number
    Banner_Path?: StringFilter<"Banners"> | string
    Banner_Start?: DateTimeFilter<"Banners"> | Date | string
    Banner_End?: DateTimeNullableFilter<"Banners"> | Date | string | null
    Banner_RateUps?: StringFilter<"Banners"> | string
  }, "Banner_Index">

  export type BannersOrderByWithAggregationInput = {
    Banner_Index?: SortOrder
    Game_ID?: SortOrder
    Banner_Path?: SortOrder
    Banner_Start?: SortOrder
    Banner_End?: SortOrderInput | SortOrder
    Banner_RateUps?: SortOrder
    _count?: BannersCountOrderByAggregateInput
    _avg?: BannersAvgOrderByAggregateInput
    _max?: BannersMaxOrderByAggregateInput
    _min?: BannersMinOrderByAggregateInput
    _sum?: BannersSumOrderByAggregateInput
  }

  export type BannersScalarWhereWithAggregatesInput = {
    AND?: BannersScalarWhereWithAggregatesInput | BannersScalarWhereWithAggregatesInput[]
    OR?: BannersScalarWhereWithAggregatesInput[]
    NOT?: BannersScalarWhereWithAggregatesInput | BannersScalarWhereWithAggregatesInput[]
    Banner_Index?: IntWithAggregatesFilter<"Banners"> | number
    Game_ID?: IntWithAggregatesFilter<"Banners"> | number
    Banner_Path?: StringWithAggregatesFilter<"Banners"> | string
    Banner_Start?: DateTimeWithAggregatesFilter<"Banners"> | Date | string
    Banner_End?: DateTimeNullableWithAggregatesFilter<"Banners"> | Date | string | null
    Banner_RateUps?: StringWithAggregatesFilter<"Banners"> | string
  }

  export type Character_BirthdaysWhereInput = {
    AND?: Character_BirthdaysWhereInput | Character_BirthdaysWhereInput[]
    OR?: Character_BirthdaysWhereInput[]
    NOT?: Character_BirthdaysWhereInput | Character_BirthdaysWhereInput[]
    Character_Index?: IntFilter<"Character_Birthdays"> | number
    Game_ID?: IntFilter<"Character_Birthdays"> | number
    Character_Name?: StringFilter<"Character_Birthdays"> | string
    Character_Birthday?: DateTimeFilter<"Character_Birthdays"> | Date | string
  }

  export type Character_BirthdaysOrderByWithRelationInput = {
    Character_Index?: SortOrder
    Game_ID?: SortOrder
    Character_Name?: SortOrder
    Character_Birthday?: SortOrder
  }

  export type Character_BirthdaysWhereUniqueInput = Prisma.AtLeast<{
    Character_Index?: number
    AND?: Character_BirthdaysWhereInput | Character_BirthdaysWhereInput[]
    OR?: Character_BirthdaysWhereInput[]
    NOT?: Character_BirthdaysWhereInput | Character_BirthdaysWhereInput[]
    Game_ID?: IntFilter<"Character_Birthdays"> | number
    Character_Name?: StringFilter<"Character_Birthdays"> | string
    Character_Birthday?: DateTimeFilter<"Character_Birthdays"> | Date | string
  }, "Character_Index">

  export type Character_BirthdaysOrderByWithAggregationInput = {
    Character_Index?: SortOrder
    Game_ID?: SortOrder
    Character_Name?: SortOrder
    Character_Birthday?: SortOrder
    _count?: Character_BirthdaysCountOrderByAggregateInput
    _avg?: Character_BirthdaysAvgOrderByAggregateInput
    _max?: Character_BirthdaysMaxOrderByAggregateInput
    _min?: Character_BirthdaysMinOrderByAggregateInput
    _sum?: Character_BirthdaysSumOrderByAggregateInput
  }

  export type Character_BirthdaysScalarWhereWithAggregatesInput = {
    AND?: Character_BirthdaysScalarWhereWithAggregatesInput | Character_BirthdaysScalarWhereWithAggregatesInput[]
    OR?: Character_BirthdaysScalarWhereWithAggregatesInput[]
    NOT?: Character_BirthdaysScalarWhereWithAggregatesInput | Character_BirthdaysScalarWhereWithAggregatesInput[]
    Character_Index?: IntWithAggregatesFilter<"Character_Birthdays"> | number
    Game_ID?: IntWithAggregatesFilter<"Character_Birthdays"> | number
    Character_Name?: StringWithAggregatesFilter<"Character_Birthdays"> | string
    Character_Birthday?: DateTimeWithAggregatesFilter<"Character_Birthdays"> | Date | string
  }

  export type CodesWhereInput = {
    AND?: CodesWhereInput | CodesWhereInput[]
    OR?: CodesWhereInput[]
    NOT?: CodesWhereInput | CodesWhereInput[]
    Code_Index?: IntFilter<"Codes"> | number
    Game_ID?: IntFilter<"Codes"> | number
    Code_Code?: StringFilter<"Codes"> | string
    Code_Rewards?: StringFilter<"Codes"> | string
    Code_End?: DateTimeNullableFilter<"Codes"> | Date | string | null
  }

  export type CodesOrderByWithRelationInput = {
    Code_Index?: SortOrder
    Game_ID?: SortOrder
    Code_Code?: SortOrder
    Code_Rewards?: SortOrder
    Code_End?: SortOrderInput | SortOrder
  }

  export type CodesWhereUniqueInput = Prisma.AtLeast<{
    Code_Index?: number
    AND?: CodesWhereInput | CodesWhereInput[]
    OR?: CodesWhereInput[]
    NOT?: CodesWhereInput | CodesWhereInput[]
    Game_ID?: IntFilter<"Codes"> | number
    Code_Code?: StringFilter<"Codes"> | string
    Code_Rewards?: StringFilter<"Codes"> | string
    Code_End?: DateTimeNullableFilter<"Codes"> | Date | string | null
  }, "Code_Index">

  export type CodesOrderByWithAggregationInput = {
    Code_Index?: SortOrder
    Game_ID?: SortOrder
    Code_Code?: SortOrder
    Code_Rewards?: SortOrder
    Code_End?: SortOrderInput | SortOrder
    _count?: CodesCountOrderByAggregateInput
    _avg?: CodesAvgOrderByAggregateInput
    _max?: CodesMaxOrderByAggregateInput
    _min?: CodesMinOrderByAggregateInput
    _sum?: CodesSumOrderByAggregateInput
  }

  export type CodesScalarWhereWithAggregatesInput = {
    AND?: CodesScalarWhereWithAggregatesInput | CodesScalarWhereWithAggregatesInput[]
    OR?: CodesScalarWhereWithAggregatesInput[]
    NOT?: CodesScalarWhereWithAggregatesInput | CodesScalarWhereWithAggregatesInput[]
    Code_Index?: IntWithAggregatesFilter<"Codes"> | number
    Game_ID?: IntWithAggregatesFilter<"Codes"> | number
    Code_Code?: StringWithAggregatesFilter<"Codes"> | string
    Code_Rewards?: StringWithAggregatesFilter<"Codes"> | string
    Code_End?: DateTimeNullableWithAggregatesFilter<"Codes"> | Date | string | null
  }

  export type EventsWhereInput = {
    AND?: EventsWhereInput | EventsWhereInput[]
    OR?: EventsWhereInput[]
    NOT?: EventsWhereInput | EventsWhereInput[]
    Event_Index?: IntFilter<"Events"> | number
    Game_ID?: IntFilter<"Events"> | number
    Event_Name?: StringFilter<"Events"> | string
    Event_Start?: DateTimeFilter<"Events"> | Date | string
    Event_End?: DateTimeNullableFilter<"Events"> | Date | string | null
    Event_Image?: StringFilter<"Events"> | string
  }

  export type EventsOrderByWithRelationInput = {
    Event_Index?: SortOrder
    Game_ID?: SortOrder
    Event_Name?: SortOrder
    Event_Start?: SortOrder
    Event_End?: SortOrderInput | SortOrder
    Event_Image?: SortOrder
  }

  export type EventsWhereUniqueInput = Prisma.AtLeast<{
    Event_Index?: number
    AND?: EventsWhereInput | EventsWhereInput[]
    OR?: EventsWhereInput[]
    NOT?: EventsWhereInput | EventsWhereInput[]
    Game_ID?: IntFilter<"Events"> | number
    Event_Name?: StringFilter<"Events"> | string
    Event_Start?: DateTimeFilter<"Events"> | Date | string
    Event_End?: DateTimeNullableFilter<"Events"> | Date | string | null
    Event_Image?: StringFilter<"Events"> | string
  }, "Event_Index">

  export type EventsOrderByWithAggregationInput = {
    Event_Index?: SortOrder
    Game_ID?: SortOrder
    Event_Name?: SortOrder
    Event_Start?: SortOrder
    Event_End?: SortOrderInput | SortOrder
    Event_Image?: SortOrder
    _count?: EventsCountOrderByAggregateInput
    _avg?: EventsAvgOrderByAggregateInput
    _max?: EventsMaxOrderByAggregateInput
    _min?: EventsMinOrderByAggregateInput
    _sum?: EventsSumOrderByAggregateInput
  }

  export type EventsScalarWhereWithAggregatesInput = {
    AND?: EventsScalarWhereWithAggregatesInput | EventsScalarWhereWithAggregatesInput[]
    OR?: EventsScalarWhereWithAggregatesInput[]
    NOT?: EventsScalarWhereWithAggregatesInput | EventsScalarWhereWithAggregatesInput[]
    Event_Index?: IntWithAggregatesFilter<"Events"> | number
    Game_ID?: IntWithAggregatesFilter<"Events"> | number
    Event_Name?: StringWithAggregatesFilter<"Events"> | string
    Event_Start?: DateTimeWithAggregatesFilter<"Events"> | Date | string
    Event_End?: DateTimeNullableWithAggregatesFilter<"Events"> | Date | string | null
    Event_Image?: StringWithAggregatesFilter<"Events"> | string
  }

  export type Game_GeneralWhereInput = {
    AND?: Game_GeneralWhereInput | Game_GeneralWhereInput[]
    OR?: Game_GeneralWhereInput[]
    NOT?: Game_GeneralWhereInput | Game_GeneralWhereInput[]
    Game_ID?: IntFilter<"Game_General"> | number
    Game_Name?: StringFilter<"Game_General"> | string
  }

  export type Game_GeneralOrderByWithRelationInput = {
    Game_ID?: SortOrder
    Game_Name?: SortOrder
  }

  export type Game_GeneralWhereUniqueInput = Prisma.AtLeast<{
    Game_ID?: number
    AND?: Game_GeneralWhereInput | Game_GeneralWhereInput[]
    OR?: Game_GeneralWhereInput[]
    NOT?: Game_GeneralWhereInput | Game_GeneralWhereInput[]
    Game_Name?: StringFilter<"Game_General"> | string
  }, "Game_ID">

  export type Game_GeneralOrderByWithAggregationInput = {
    Game_ID?: SortOrder
    Game_Name?: SortOrder
    _count?: Game_GeneralCountOrderByAggregateInput
    _avg?: Game_GeneralAvgOrderByAggregateInput
    _max?: Game_GeneralMaxOrderByAggregateInput
    _min?: Game_GeneralMinOrderByAggregateInput
    _sum?: Game_GeneralSumOrderByAggregateInput
  }

  export type Game_GeneralScalarWhereWithAggregatesInput = {
    AND?: Game_GeneralScalarWhereWithAggregatesInput | Game_GeneralScalarWhereWithAggregatesInput[]
    OR?: Game_GeneralScalarWhereWithAggregatesInput[]
    NOT?: Game_GeneralScalarWhereWithAggregatesInput | Game_GeneralScalarWhereWithAggregatesInput[]
    Game_ID?: IntWithAggregatesFilter<"Game_General"> | number
    Game_Name?: StringWithAggregatesFilter<"Game_General"> | string
  }

  export type Games_UsersWhereInput = {
    AND?: Games_UsersWhereInput | Games_UsersWhereInput[]
    OR?: Games_UsersWhereInput[]
    NOT?: Games_UsersWhereInput | Games_UsersWhereInput[]
    UID?: StringFilter<"Games_Users"> | string
    Genshin_UID?: StringNullableFilter<"Games_Users"> | string | null
    StarRail_UID?: StringNullableFilter<"Games_Users"> | string | null
  }

  export type Games_UsersOrderByWithRelationInput = {
    UID?: SortOrder
    Genshin_UID?: SortOrderInput | SortOrder
    StarRail_UID?: SortOrderInput | SortOrder
  }

  export type Games_UsersWhereUniqueInput = Prisma.AtLeast<{
    UID?: string
    AND?: Games_UsersWhereInput | Games_UsersWhereInput[]
    OR?: Games_UsersWhereInput[]
    NOT?: Games_UsersWhereInput | Games_UsersWhereInput[]
    Genshin_UID?: StringNullableFilter<"Games_Users"> | string | null
    StarRail_UID?: StringNullableFilter<"Games_Users"> | string | null
  }, "UID">

  export type Games_UsersOrderByWithAggregationInput = {
    UID?: SortOrder
    Genshin_UID?: SortOrderInput | SortOrder
    StarRail_UID?: SortOrderInput | SortOrder
    _count?: Games_UsersCountOrderByAggregateInput
    _max?: Games_UsersMaxOrderByAggregateInput
    _min?: Games_UsersMinOrderByAggregateInput
  }

  export type Games_UsersScalarWhereWithAggregatesInput = {
    AND?: Games_UsersScalarWhereWithAggregatesInput | Games_UsersScalarWhereWithAggregatesInput[]
    OR?: Games_UsersScalarWhereWithAggregatesInput[]
    NOT?: Games_UsersScalarWhereWithAggregatesInput | Games_UsersScalarWhereWithAggregatesInput[]
    UID?: StringWithAggregatesFilter<"Games_Users"> | string
    Genshin_UID?: StringNullableWithAggregatesFilter<"Games_Users"> | string | null
    StarRail_UID?: StringNullableWithAggregatesFilter<"Games_Users"> | string | null
  }

  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    UID?: StringFilter<"Users"> | string
    Username?: StringFilter<"Users"> | string
    Password_Hash?: StringFilter<"Users"> | string
    Email?: StringFilter<"Users"> | string
    Registration_Date?: DateTimeFilter<"Users"> | Date | string
    Last_Login?: DateTimeNullableFilter<"Users"> | Date | string | null
  }

  export type UsersOrderByWithRelationInput = {
    UID?: SortOrder
    Username?: SortOrder
    Password_Hash?: SortOrder
    Email?: SortOrder
    Registration_Date?: SortOrder
    Last_Login?: SortOrderInput | SortOrder
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    UID?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    Username?: StringFilter<"Users"> | string
    Password_Hash?: StringFilter<"Users"> | string
    Email?: StringFilter<"Users"> | string
    Registration_Date?: DateTimeFilter<"Users"> | Date | string
    Last_Login?: DateTimeNullableFilter<"Users"> | Date | string | null
  }, "UID">

  export type UsersOrderByWithAggregationInput = {
    UID?: SortOrder
    Username?: SortOrder
    Password_Hash?: SortOrder
    Email?: SortOrder
    Registration_Date?: SortOrder
    Last_Login?: SortOrderInput | SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    UID?: StringWithAggregatesFilter<"Users"> | string
    Username?: StringWithAggregatesFilter<"Users"> | string
    Password_Hash?: StringWithAggregatesFilter<"Users"> | string
    Email?: StringWithAggregatesFilter<"Users"> | string
    Registration_Date?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    Last_Login?: DateTimeNullableWithAggregatesFilter<"Users"> | Date | string | null
  }

  export type Genshin_DrawWhereInput = {
    AND?: Genshin_DrawWhereInput | Genshin_DrawWhereInput[]
    OR?: Genshin_DrawWhereInput[]
    NOT?: Genshin_DrawWhereInput | Genshin_DrawWhereInput[]
    Wish_Index?: IntFilter<"Genshin_Draw"> | number
    Genshin_UID?: StringFilter<"Genshin_Draw"> | string
    DrawID?: StringFilter<"Genshin_Draw"> | string
    DrawTime?: DateTimeFilter<"Genshin_Draw"> | Date | string
    DrawType?: StringFilter<"Genshin_Draw"> | string
    Item_Name?: StringFilter<"Genshin_Draw"> | string
    Rarity?: StringFilter<"Genshin_Draw"> | string
  }

  export type Genshin_DrawOrderByWithRelationInput = {
    Wish_Index?: SortOrder
    Genshin_UID?: SortOrder
    DrawID?: SortOrder
    DrawTime?: SortOrder
    DrawType?: SortOrder
    Item_Name?: SortOrder
    Rarity?: SortOrder
  }

  export type Genshin_DrawWhereUniqueInput = Prisma.AtLeast<{
    Wish_Index?: number
    DrawID?: string
    AND?: Genshin_DrawWhereInput | Genshin_DrawWhereInput[]
    OR?: Genshin_DrawWhereInput[]
    NOT?: Genshin_DrawWhereInput | Genshin_DrawWhereInput[]
    Genshin_UID?: StringFilter<"Genshin_Draw"> | string
    DrawTime?: DateTimeFilter<"Genshin_Draw"> | Date | string
    DrawType?: StringFilter<"Genshin_Draw"> | string
    Item_Name?: StringFilter<"Genshin_Draw"> | string
    Rarity?: StringFilter<"Genshin_Draw"> | string
  }, "Wish_Index" | "DrawID">

  export type Genshin_DrawOrderByWithAggregationInput = {
    Wish_Index?: SortOrder
    Genshin_UID?: SortOrder
    DrawID?: SortOrder
    DrawTime?: SortOrder
    DrawType?: SortOrder
    Item_Name?: SortOrder
    Rarity?: SortOrder
    _count?: Genshin_DrawCountOrderByAggregateInput
    _avg?: Genshin_DrawAvgOrderByAggregateInput
    _max?: Genshin_DrawMaxOrderByAggregateInput
    _min?: Genshin_DrawMinOrderByAggregateInput
    _sum?: Genshin_DrawSumOrderByAggregateInput
  }

  export type Genshin_DrawScalarWhereWithAggregatesInput = {
    AND?: Genshin_DrawScalarWhereWithAggregatesInput | Genshin_DrawScalarWhereWithAggregatesInput[]
    OR?: Genshin_DrawScalarWhereWithAggregatesInput[]
    NOT?: Genshin_DrawScalarWhereWithAggregatesInput | Genshin_DrawScalarWhereWithAggregatesInput[]
    Wish_Index?: IntWithAggregatesFilter<"Genshin_Draw"> | number
    Genshin_UID?: StringWithAggregatesFilter<"Genshin_Draw"> | string
    DrawID?: StringWithAggregatesFilter<"Genshin_Draw"> | string
    DrawTime?: DateTimeWithAggregatesFilter<"Genshin_Draw"> | Date | string
    DrawType?: StringWithAggregatesFilter<"Genshin_Draw"> | string
    Item_Name?: StringWithAggregatesFilter<"Genshin_Draw"> | string
    Rarity?: StringWithAggregatesFilter<"Genshin_Draw"> | string
  }

  export type StarRail_DrawWhereInput = {
    AND?: StarRail_DrawWhereInput | StarRail_DrawWhereInput[]
    OR?: StarRail_DrawWhereInput[]
    NOT?: StarRail_DrawWhereInput | StarRail_DrawWhereInput[]
    Wish_Index?: IntFilter<"StarRail_Draw"> | number
    StarRail_UID?: StringFilter<"StarRail_Draw"> | string
    DrawID?: StringFilter<"StarRail_Draw"> | string
    DrawTime?: DateTimeFilter<"StarRail_Draw"> | Date | string
    DrawType?: StringFilter<"StarRail_Draw"> | string
    Item_Name?: StringFilter<"StarRail_Draw"> | string
    Rarity?: StringFilter<"StarRail_Draw"> | string
  }

  export type StarRail_DrawOrderByWithRelationInput = {
    Wish_Index?: SortOrder
    StarRail_UID?: SortOrder
    DrawID?: SortOrder
    DrawTime?: SortOrder
    DrawType?: SortOrder
    Item_Name?: SortOrder
    Rarity?: SortOrder
  }

  export type StarRail_DrawWhereUniqueInput = Prisma.AtLeast<{
    Wish_Index?: number
    DrawID?: string
    AND?: StarRail_DrawWhereInput | StarRail_DrawWhereInput[]
    OR?: StarRail_DrawWhereInput[]
    NOT?: StarRail_DrawWhereInput | StarRail_DrawWhereInput[]
    StarRail_UID?: StringFilter<"StarRail_Draw"> | string
    DrawTime?: DateTimeFilter<"StarRail_Draw"> | Date | string
    DrawType?: StringFilter<"StarRail_Draw"> | string
    Item_Name?: StringFilter<"StarRail_Draw"> | string
    Rarity?: StringFilter<"StarRail_Draw"> | string
  }, "Wish_Index" | "DrawID">

  export type StarRail_DrawOrderByWithAggregationInput = {
    Wish_Index?: SortOrder
    StarRail_UID?: SortOrder
    DrawID?: SortOrder
    DrawTime?: SortOrder
    DrawType?: SortOrder
    Item_Name?: SortOrder
    Rarity?: SortOrder
    _count?: StarRail_DrawCountOrderByAggregateInput
    _avg?: StarRail_DrawAvgOrderByAggregateInput
    _max?: StarRail_DrawMaxOrderByAggregateInput
    _min?: StarRail_DrawMinOrderByAggregateInput
    _sum?: StarRail_DrawSumOrderByAggregateInput
  }

  export type StarRail_DrawScalarWhereWithAggregatesInput = {
    AND?: StarRail_DrawScalarWhereWithAggregatesInput | StarRail_DrawScalarWhereWithAggregatesInput[]
    OR?: StarRail_DrawScalarWhereWithAggregatesInput[]
    NOT?: StarRail_DrawScalarWhereWithAggregatesInput | StarRail_DrawScalarWhereWithAggregatesInput[]
    Wish_Index?: IntWithAggregatesFilter<"StarRail_Draw"> | number
    StarRail_UID?: StringWithAggregatesFilter<"StarRail_Draw"> | string
    DrawID?: StringWithAggregatesFilter<"StarRail_Draw"> | string
    DrawTime?: DateTimeWithAggregatesFilter<"StarRail_Draw"> | Date | string
    DrawType?: StringWithAggregatesFilter<"StarRail_Draw"> | string
    Item_Name?: StringWithAggregatesFilter<"StarRail_Draw"> | string
    Rarity?: StringWithAggregatesFilter<"StarRail_Draw"> | string
  }

  export type SummaryTableWhereInput = {
    AND?: SummaryTableWhereInput | SummaryTableWhereInput[]
    OR?: SummaryTableWhereInput[]
    NOT?: SummaryTableWhereInput | SummaryTableWhereInput[]
    Summary_Table_Index?: IntFilter<"SummaryTable"> | number
    Game_UID?: StringNullableFilter<"SummaryTable"> | string | null
    total_items?: IntNullableFilter<"SummaryTable"> | number | null
  }

  export type SummaryTableOrderByWithRelationInput = {
    Summary_Table_Index?: SortOrder
    Game_UID?: SortOrderInput | SortOrder
    total_items?: SortOrderInput | SortOrder
  }

  export type SummaryTableWhereUniqueInput = Prisma.AtLeast<{
    Summary_Table_Index?: number
    Game_UID?: string
    AND?: SummaryTableWhereInput | SummaryTableWhereInput[]
    OR?: SummaryTableWhereInput[]
    NOT?: SummaryTableWhereInput | SummaryTableWhereInput[]
    total_items?: IntNullableFilter<"SummaryTable"> | number | null
  }, "Summary_Table_Index" | "Game_UID">

  export type SummaryTableOrderByWithAggregationInput = {
    Summary_Table_Index?: SortOrder
    Game_UID?: SortOrderInput | SortOrder
    total_items?: SortOrderInput | SortOrder
    _count?: SummaryTableCountOrderByAggregateInput
    _avg?: SummaryTableAvgOrderByAggregateInput
    _max?: SummaryTableMaxOrderByAggregateInput
    _min?: SummaryTableMinOrderByAggregateInput
    _sum?: SummaryTableSumOrderByAggregateInput
  }

  export type SummaryTableScalarWhereWithAggregatesInput = {
    AND?: SummaryTableScalarWhereWithAggregatesInput | SummaryTableScalarWhereWithAggregatesInput[]
    OR?: SummaryTableScalarWhereWithAggregatesInput[]
    NOT?: SummaryTableScalarWhereWithAggregatesInput | SummaryTableScalarWhereWithAggregatesInput[]
    Summary_Table_Index?: IntWithAggregatesFilter<"SummaryTable"> | number
    Game_UID?: StringNullableWithAggregatesFilter<"SummaryTable"> | string | null
    total_items?: IntNullableWithAggregatesFilter<"SummaryTable"> | number | null
  }

  export type API_UsageCreateInput = {
    API_Name: string
    API_Last_Used: Date | string
  }

  export type API_UsageUncheckedCreateInput = {
    API_Index?: number
    API_Name: string
    API_Last_Used: Date | string
  }

  export type API_UsageUpdateInput = {
    API_Name?: StringFieldUpdateOperationsInput | string
    API_Last_Used?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type API_UsageUncheckedUpdateInput = {
    API_Index?: IntFieldUpdateOperationsInput | number
    API_Name?: StringFieldUpdateOperationsInput | string
    API_Last_Used?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type API_UsageCreateManyInput = {
    API_Index?: number
    API_Name: string
    API_Last_Used: Date | string
  }

  export type API_UsageUpdateManyMutationInput = {
    API_Name?: StringFieldUpdateOperationsInput | string
    API_Last_Used?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type API_UsageUncheckedUpdateManyInput = {
    API_Index?: IntFieldUpdateOperationsInput | number
    API_Name?: StringFieldUpdateOperationsInput | string
    API_Last_Used?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BannersCreateInput = {
    Game_ID: number
    Banner_Path: string
    Banner_Start: Date | string
    Banner_End?: Date | string | null
    Banner_RateUps: string
  }

  export type BannersUncheckedCreateInput = {
    Banner_Index?: number
    Game_ID: number
    Banner_Path: string
    Banner_Start: Date | string
    Banner_End?: Date | string | null
    Banner_RateUps: string
  }

  export type BannersUpdateInput = {
    Game_ID?: IntFieldUpdateOperationsInput | number
    Banner_Path?: StringFieldUpdateOperationsInput | string
    Banner_Start?: DateTimeFieldUpdateOperationsInput | Date | string
    Banner_End?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Banner_RateUps?: StringFieldUpdateOperationsInput | string
  }

  export type BannersUncheckedUpdateInput = {
    Banner_Index?: IntFieldUpdateOperationsInput | number
    Game_ID?: IntFieldUpdateOperationsInput | number
    Banner_Path?: StringFieldUpdateOperationsInput | string
    Banner_Start?: DateTimeFieldUpdateOperationsInput | Date | string
    Banner_End?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Banner_RateUps?: StringFieldUpdateOperationsInput | string
  }

  export type BannersCreateManyInput = {
    Banner_Index?: number
    Game_ID: number
    Banner_Path: string
    Banner_Start: Date | string
    Banner_End?: Date | string | null
    Banner_RateUps: string
  }

  export type BannersUpdateManyMutationInput = {
    Game_ID?: IntFieldUpdateOperationsInput | number
    Banner_Path?: StringFieldUpdateOperationsInput | string
    Banner_Start?: DateTimeFieldUpdateOperationsInput | Date | string
    Banner_End?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Banner_RateUps?: StringFieldUpdateOperationsInput | string
  }

  export type BannersUncheckedUpdateManyInput = {
    Banner_Index?: IntFieldUpdateOperationsInput | number
    Game_ID?: IntFieldUpdateOperationsInput | number
    Banner_Path?: StringFieldUpdateOperationsInput | string
    Banner_Start?: DateTimeFieldUpdateOperationsInput | Date | string
    Banner_End?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Banner_RateUps?: StringFieldUpdateOperationsInput | string
  }

  export type Character_BirthdaysCreateInput = {
    Game_ID: number
    Character_Name: string
    Character_Birthday: Date | string
  }

  export type Character_BirthdaysUncheckedCreateInput = {
    Character_Index?: number
    Game_ID: number
    Character_Name: string
    Character_Birthday: Date | string
  }

  export type Character_BirthdaysUpdateInput = {
    Game_ID?: IntFieldUpdateOperationsInput | number
    Character_Name?: StringFieldUpdateOperationsInput | string
    Character_Birthday?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Character_BirthdaysUncheckedUpdateInput = {
    Character_Index?: IntFieldUpdateOperationsInput | number
    Game_ID?: IntFieldUpdateOperationsInput | number
    Character_Name?: StringFieldUpdateOperationsInput | string
    Character_Birthday?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Character_BirthdaysCreateManyInput = {
    Character_Index?: number
    Game_ID: number
    Character_Name: string
    Character_Birthday: Date | string
  }

  export type Character_BirthdaysUpdateManyMutationInput = {
    Game_ID?: IntFieldUpdateOperationsInput | number
    Character_Name?: StringFieldUpdateOperationsInput | string
    Character_Birthday?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Character_BirthdaysUncheckedUpdateManyInput = {
    Character_Index?: IntFieldUpdateOperationsInput | number
    Game_ID?: IntFieldUpdateOperationsInput | number
    Character_Name?: StringFieldUpdateOperationsInput | string
    Character_Birthday?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodesCreateInput = {
    Game_ID: number
    Code_Code: string
    Code_Rewards: string
    Code_End?: Date | string | null
  }

  export type CodesUncheckedCreateInput = {
    Code_Index?: number
    Game_ID: number
    Code_Code: string
    Code_Rewards: string
    Code_End?: Date | string | null
  }

  export type CodesUpdateInput = {
    Game_ID?: IntFieldUpdateOperationsInput | number
    Code_Code?: StringFieldUpdateOperationsInput | string
    Code_Rewards?: StringFieldUpdateOperationsInput | string
    Code_End?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CodesUncheckedUpdateInput = {
    Code_Index?: IntFieldUpdateOperationsInput | number
    Game_ID?: IntFieldUpdateOperationsInput | number
    Code_Code?: StringFieldUpdateOperationsInput | string
    Code_Rewards?: StringFieldUpdateOperationsInput | string
    Code_End?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CodesCreateManyInput = {
    Code_Index?: number
    Game_ID: number
    Code_Code: string
    Code_Rewards: string
    Code_End?: Date | string | null
  }

  export type CodesUpdateManyMutationInput = {
    Game_ID?: IntFieldUpdateOperationsInput | number
    Code_Code?: StringFieldUpdateOperationsInput | string
    Code_Rewards?: StringFieldUpdateOperationsInput | string
    Code_End?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CodesUncheckedUpdateManyInput = {
    Code_Index?: IntFieldUpdateOperationsInput | number
    Game_ID?: IntFieldUpdateOperationsInput | number
    Code_Code?: StringFieldUpdateOperationsInput | string
    Code_Rewards?: StringFieldUpdateOperationsInput | string
    Code_End?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventsCreateInput = {
    Game_ID: number
    Event_Name: string
    Event_Start: Date | string
    Event_End?: Date | string | null
    Event_Image: string
  }

  export type EventsUncheckedCreateInput = {
    Event_Index?: number
    Game_ID: number
    Event_Name: string
    Event_Start: Date | string
    Event_End?: Date | string | null
    Event_Image: string
  }

  export type EventsUpdateInput = {
    Game_ID?: IntFieldUpdateOperationsInput | number
    Event_Name?: StringFieldUpdateOperationsInput | string
    Event_Start?: DateTimeFieldUpdateOperationsInput | Date | string
    Event_End?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Event_Image?: StringFieldUpdateOperationsInput | string
  }

  export type EventsUncheckedUpdateInput = {
    Event_Index?: IntFieldUpdateOperationsInput | number
    Game_ID?: IntFieldUpdateOperationsInput | number
    Event_Name?: StringFieldUpdateOperationsInput | string
    Event_Start?: DateTimeFieldUpdateOperationsInput | Date | string
    Event_End?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Event_Image?: StringFieldUpdateOperationsInput | string
  }

  export type EventsCreateManyInput = {
    Event_Index?: number
    Game_ID: number
    Event_Name: string
    Event_Start: Date | string
    Event_End?: Date | string | null
    Event_Image: string
  }

  export type EventsUpdateManyMutationInput = {
    Game_ID?: IntFieldUpdateOperationsInput | number
    Event_Name?: StringFieldUpdateOperationsInput | string
    Event_Start?: DateTimeFieldUpdateOperationsInput | Date | string
    Event_End?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Event_Image?: StringFieldUpdateOperationsInput | string
  }

  export type EventsUncheckedUpdateManyInput = {
    Event_Index?: IntFieldUpdateOperationsInput | number
    Game_ID?: IntFieldUpdateOperationsInput | number
    Event_Name?: StringFieldUpdateOperationsInput | string
    Event_Start?: DateTimeFieldUpdateOperationsInput | Date | string
    Event_End?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Event_Image?: StringFieldUpdateOperationsInput | string
  }

  export type Game_GeneralCreateInput = {
    Game_ID: number
    Game_Name: string
  }

  export type Game_GeneralUncheckedCreateInput = {
    Game_ID: number
    Game_Name: string
  }

  export type Game_GeneralUpdateInput = {
    Game_ID?: IntFieldUpdateOperationsInput | number
    Game_Name?: StringFieldUpdateOperationsInput | string
  }

  export type Game_GeneralUncheckedUpdateInput = {
    Game_ID?: IntFieldUpdateOperationsInput | number
    Game_Name?: StringFieldUpdateOperationsInput | string
  }

  export type Game_GeneralCreateManyInput = {
    Game_ID: number
    Game_Name: string
  }

  export type Game_GeneralUpdateManyMutationInput = {
    Game_ID?: IntFieldUpdateOperationsInput | number
    Game_Name?: StringFieldUpdateOperationsInput | string
  }

  export type Game_GeneralUncheckedUpdateManyInput = {
    Game_ID?: IntFieldUpdateOperationsInput | number
    Game_Name?: StringFieldUpdateOperationsInput | string
  }

  export type Games_UsersCreateInput = {
    UID: string
    Genshin_UID?: string | null
    StarRail_UID?: string | null
  }

  export type Games_UsersUncheckedCreateInput = {
    UID: string
    Genshin_UID?: string | null
    StarRail_UID?: string | null
  }

  export type Games_UsersUpdateInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Genshin_UID?: NullableStringFieldUpdateOperationsInput | string | null
    StarRail_UID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Games_UsersUncheckedUpdateInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Genshin_UID?: NullableStringFieldUpdateOperationsInput | string | null
    StarRail_UID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Games_UsersCreateManyInput = {
    UID: string
    Genshin_UID?: string | null
    StarRail_UID?: string | null
  }

  export type Games_UsersUpdateManyMutationInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Genshin_UID?: NullableStringFieldUpdateOperationsInput | string | null
    StarRail_UID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Games_UsersUncheckedUpdateManyInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Genshin_UID?: NullableStringFieldUpdateOperationsInput | string | null
    StarRail_UID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersCreateInput = {
    UID: string
    Username: string
    Password_Hash: string
    Email: string
    Registration_Date: Date | string
    Last_Login?: Date | string | null
  }

  export type UsersUncheckedCreateInput = {
    UID: string
    Username: string
    Password_Hash: string
    Email: string
    Registration_Date: Date | string
    Last_Login?: Date | string | null
  }

  export type UsersUpdateInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password_Hash?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Registration_Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Last_Login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password_Hash?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Registration_Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Last_Login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersCreateManyInput = {
    UID: string
    Username: string
    Password_Hash: string
    Email: string
    Registration_Date: Date | string
    Last_Login?: Date | string | null
  }

  export type UsersUpdateManyMutationInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password_Hash?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Registration_Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Last_Login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateManyInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password_Hash?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Registration_Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Last_Login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Genshin_DrawCreateInput = {
    Genshin_UID: string
    DrawID: string
    DrawTime: Date | string
    DrawType: string
    Item_Name: string
    Rarity: string
  }

  export type Genshin_DrawUncheckedCreateInput = {
    Wish_Index?: number
    Genshin_UID: string
    DrawID: string
    DrawTime: Date | string
    DrawType: string
    Item_Name: string
    Rarity: string
  }

  export type Genshin_DrawUpdateInput = {
    Genshin_UID?: StringFieldUpdateOperationsInput | string
    DrawID?: StringFieldUpdateOperationsInput | string
    DrawTime?: DateTimeFieldUpdateOperationsInput | Date | string
    DrawType?: StringFieldUpdateOperationsInput | string
    Item_Name?: StringFieldUpdateOperationsInput | string
    Rarity?: StringFieldUpdateOperationsInput | string
  }

  export type Genshin_DrawUncheckedUpdateInput = {
    Wish_Index?: IntFieldUpdateOperationsInput | number
    Genshin_UID?: StringFieldUpdateOperationsInput | string
    DrawID?: StringFieldUpdateOperationsInput | string
    DrawTime?: DateTimeFieldUpdateOperationsInput | Date | string
    DrawType?: StringFieldUpdateOperationsInput | string
    Item_Name?: StringFieldUpdateOperationsInput | string
    Rarity?: StringFieldUpdateOperationsInput | string
  }

  export type Genshin_DrawCreateManyInput = {
    Wish_Index?: number
    Genshin_UID: string
    DrawID: string
    DrawTime: Date | string
    DrawType: string
    Item_Name: string
    Rarity: string
  }

  export type Genshin_DrawUpdateManyMutationInput = {
    Genshin_UID?: StringFieldUpdateOperationsInput | string
    DrawID?: StringFieldUpdateOperationsInput | string
    DrawTime?: DateTimeFieldUpdateOperationsInput | Date | string
    DrawType?: StringFieldUpdateOperationsInput | string
    Item_Name?: StringFieldUpdateOperationsInput | string
    Rarity?: StringFieldUpdateOperationsInput | string
  }

  export type Genshin_DrawUncheckedUpdateManyInput = {
    Wish_Index?: IntFieldUpdateOperationsInput | number
    Genshin_UID?: StringFieldUpdateOperationsInput | string
    DrawID?: StringFieldUpdateOperationsInput | string
    DrawTime?: DateTimeFieldUpdateOperationsInput | Date | string
    DrawType?: StringFieldUpdateOperationsInput | string
    Item_Name?: StringFieldUpdateOperationsInput | string
    Rarity?: StringFieldUpdateOperationsInput | string
  }

  export type StarRail_DrawCreateInput = {
    StarRail_UID: string
    DrawID: string
    DrawTime: Date | string
    DrawType: string
    Item_Name: string
    Rarity: string
  }

  export type StarRail_DrawUncheckedCreateInput = {
    Wish_Index?: number
    StarRail_UID: string
    DrawID: string
    DrawTime: Date | string
    DrawType: string
    Item_Name: string
    Rarity: string
  }

  export type StarRail_DrawUpdateInput = {
    StarRail_UID?: StringFieldUpdateOperationsInput | string
    DrawID?: StringFieldUpdateOperationsInput | string
    DrawTime?: DateTimeFieldUpdateOperationsInput | Date | string
    DrawType?: StringFieldUpdateOperationsInput | string
    Item_Name?: StringFieldUpdateOperationsInput | string
    Rarity?: StringFieldUpdateOperationsInput | string
  }

  export type StarRail_DrawUncheckedUpdateInput = {
    Wish_Index?: IntFieldUpdateOperationsInput | number
    StarRail_UID?: StringFieldUpdateOperationsInput | string
    DrawID?: StringFieldUpdateOperationsInput | string
    DrawTime?: DateTimeFieldUpdateOperationsInput | Date | string
    DrawType?: StringFieldUpdateOperationsInput | string
    Item_Name?: StringFieldUpdateOperationsInput | string
    Rarity?: StringFieldUpdateOperationsInput | string
  }

  export type StarRail_DrawCreateManyInput = {
    Wish_Index?: number
    StarRail_UID: string
    DrawID: string
    DrawTime: Date | string
    DrawType: string
    Item_Name: string
    Rarity: string
  }

  export type StarRail_DrawUpdateManyMutationInput = {
    StarRail_UID?: StringFieldUpdateOperationsInput | string
    DrawID?: StringFieldUpdateOperationsInput | string
    DrawTime?: DateTimeFieldUpdateOperationsInput | Date | string
    DrawType?: StringFieldUpdateOperationsInput | string
    Item_Name?: StringFieldUpdateOperationsInput | string
    Rarity?: StringFieldUpdateOperationsInput | string
  }

  export type StarRail_DrawUncheckedUpdateManyInput = {
    Wish_Index?: IntFieldUpdateOperationsInput | number
    StarRail_UID?: StringFieldUpdateOperationsInput | string
    DrawID?: StringFieldUpdateOperationsInput | string
    DrawTime?: DateTimeFieldUpdateOperationsInput | Date | string
    DrawType?: StringFieldUpdateOperationsInput | string
    Item_Name?: StringFieldUpdateOperationsInput | string
    Rarity?: StringFieldUpdateOperationsInput | string
  }

  export type SummaryTableCreateInput = {
    Game_UID?: string | null
    total_items?: number | null
  }

  export type SummaryTableUncheckedCreateInput = {
    Summary_Table_Index?: number
    Game_UID?: string | null
    total_items?: number | null
  }

  export type SummaryTableUpdateInput = {
    Game_UID?: NullableStringFieldUpdateOperationsInput | string | null
    total_items?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SummaryTableUncheckedUpdateInput = {
    Summary_Table_Index?: IntFieldUpdateOperationsInput | number
    Game_UID?: NullableStringFieldUpdateOperationsInput | string | null
    total_items?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SummaryTableCreateManyInput = {
    Summary_Table_Index?: number
    Game_UID?: string | null
    total_items?: number | null
  }

  export type SummaryTableUpdateManyMutationInput = {
    Game_UID?: NullableStringFieldUpdateOperationsInput | string | null
    total_items?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SummaryTableUncheckedUpdateManyInput = {
    Summary_Table_Index?: IntFieldUpdateOperationsInput | number
    Game_UID?: NullableStringFieldUpdateOperationsInput | string | null
    total_items?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type API_UsageCountOrderByAggregateInput = {
    API_Index?: SortOrder
    API_Name?: SortOrder
    API_Last_Used?: SortOrder
  }

  export type API_UsageAvgOrderByAggregateInput = {
    API_Index?: SortOrder
  }

  export type API_UsageMaxOrderByAggregateInput = {
    API_Index?: SortOrder
    API_Name?: SortOrder
    API_Last_Used?: SortOrder
  }

  export type API_UsageMinOrderByAggregateInput = {
    API_Index?: SortOrder
    API_Name?: SortOrder
    API_Last_Used?: SortOrder
  }

  export type API_UsageSumOrderByAggregateInput = {
    API_Index?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BannersCountOrderByAggregateInput = {
    Banner_Index?: SortOrder
    Game_ID?: SortOrder
    Banner_Path?: SortOrder
    Banner_Start?: SortOrder
    Banner_End?: SortOrder
    Banner_RateUps?: SortOrder
  }

  export type BannersAvgOrderByAggregateInput = {
    Banner_Index?: SortOrder
    Game_ID?: SortOrder
  }

  export type BannersMaxOrderByAggregateInput = {
    Banner_Index?: SortOrder
    Game_ID?: SortOrder
    Banner_Path?: SortOrder
    Banner_Start?: SortOrder
    Banner_End?: SortOrder
    Banner_RateUps?: SortOrder
  }

  export type BannersMinOrderByAggregateInput = {
    Banner_Index?: SortOrder
    Game_ID?: SortOrder
    Banner_Path?: SortOrder
    Banner_Start?: SortOrder
    Banner_End?: SortOrder
    Banner_RateUps?: SortOrder
  }

  export type BannersSumOrderByAggregateInput = {
    Banner_Index?: SortOrder
    Game_ID?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type Character_BirthdaysCountOrderByAggregateInput = {
    Character_Index?: SortOrder
    Game_ID?: SortOrder
    Character_Name?: SortOrder
    Character_Birthday?: SortOrder
  }

  export type Character_BirthdaysAvgOrderByAggregateInput = {
    Character_Index?: SortOrder
    Game_ID?: SortOrder
  }

  export type Character_BirthdaysMaxOrderByAggregateInput = {
    Character_Index?: SortOrder
    Game_ID?: SortOrder
    Character_Name?: SortOrder
    Character_Birthday?: SortOrder
  }

  export type Character_BirthdaysMinOrderByAggregateInput = {
    Character_Index?: SortOrder
    Game_ID?: SortOrder
    Character_Name?: SortOrder
    Character_Birthday?: SortOrder
  }

  export type Character_BirthdaysSumOrderByAggregateInput = {
    Character_Index?: SortOrder
    Game_ID?: SortOrder
  }

  export type CodesCountOrderByAggregateInput = {
    Code_Index?: SortOrder
    Game_ID?: SortOrder
    Code_Code?: SortOrder
    Code_Rewards?: SortOrder
    Code_End?: SortOrder
  }

  export type CodesAvgOrderByAggregateInput = {
    Code_Index?: SortOrder
    Game_ID?: SortOrder
  }

  export type CodesMaxOrderByAggregateInput = {
    Code_Index?: SortOrder
    Game_ID?: SortOrder
    Code_Code?: SortOrder
    Code_Rewards?: SortOrder
    Code_End?: SortOrder
  }

  export type CodesMinOrderByAggregateInput = {
    Code_Index?: SortOrder
    Game_ID?: SortOrder
    Code_Code?: SortOrder
    Code_Rewards?: SortOrder
    Code_End?: SortOrder
  }

  export type CodesSumOrderByAggregateInput = {
    Code_Index?: SortOrder
    Game_ID?: SortOrder
  }

  export type EventsCountOrderByAggregateInput = {
    Event_Index?: SortOrder
    Game_ID?: SortOrder
    Event_Name?: SortOrder
    Event_Start?: SortOrder
    Event_End?: SortOrder
    Event_Image?: SortOrder
  }

  export type EventsAvgOrderByAggregateInput = {
    Event_Index?: SortOrder
    Game_ID?: SortOrder
  }

  export type EventsMaxOrderByAggregateInput = {
    Event_Index?: SortOrder
    Game_ID?: SortOrder
    Event_Name?: SortOrder
    Event_Start?: SortOrder
    Event_End?: SortOrder
    Event_Image?: SortOrder
  }

  export type EventsMinOrderByAggregateInput = {
    Event_Index?: SortOrder
    Game_ID?: SortOrder
    Event_Name?: SortOrder
    Event_Start?: SortOrder
    Event_End?: SortOrder
    Event_Image?: SortOrder
  }

  export type EventsSumOrderByAggregateInput = {
    Event_Index?: SortOrder
    Game_ID?: SortOrder
  }

  export type Game_GeneralCountOrderByAggregateInput = {
    Game_ID?: SortOrder
    Game_Name?: SortOrder
  }

  export type Game_GeneralAvgOrderByAggregateInput = {
    Game_ID?: SortOrder
  }

  export type Game_GeneralMaxOrderByAggregateInput = {
    Game_ID?: SortOrder
    Game_Name?: SortOrder
  }

  export type Game_GeneralMinOrderByAggregateInput = {
    Game_ID?: SortOrder
    Game_Name?: SortOrder
  }

  export type Game_GeneralSumOrderByAggregateInput = {
    Game_ID?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type Games_UsersCountOrderByAggregateInput = {
    UID?: SortOrder
    Genshin_UID?: SortOrder
    StarRail_UID?: SortOrder
  }

  export type Games_UsersMaxOrderByAggregateInput = {
    UID?: SortOrder
    Genshin_UID?: SortOrder
    StarRail_UID?: SortOrder
  }

  export type Games_UsersMinOrderByAggregateInput = {
    UID?: SortOrder
    Genshin_UID?: SortOrder
    StarRail_UID?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UsersCountOrderByAggregateInput = {
    UID?: SortOrder
    Username?: SortOrder
    Password_Hash?: SortOrder
    Email?: SortOrder
    Registration_Date?: SortOrder
    Last_Login?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    UID?: SortOrder
    Username?: SortOrder
    Password_Hash?: SortOrder
    Email?: SortOrder
    Registration_Date?: SortOrder
    Last_Login?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    UID?: SortOrder
    Username?: SortOrder
    Password_Hash?: SortOrder
    Email?: SortOrder
    Registration_Date?: SortOrder
    Last_Login?: SortOrder
  }

  export type Genshin_DrawCountOrderByAggregateInput = {
    Wish_Index?: SortOrder
    Genshin_UID?: SortOrder
    DrawID?: SortOrder
    DrawTime?: SortOrder
    DrawType?: SortOrder
    Item_Name?: SortOrder
    Rarity?: SortOrder
  }

  export type Genshin_DrawAvgOrderByAggregateInput = {
    Wish_Index?: SortOrder
  }

  export type Genshin_DrawMaxOrderByAggregateInput = {
    Wish_Index?: SortOrder
    Genshin_UID?: SortOrder
    DrawID?: SortOrder
    DrawTime?: SortOrder
    DrawType?: SortOrder
    Item_Name?: SortOrder
    Rarity?: SortOrder
  }

  export type Genshin_DrawMinOrderByAggregateInput = {
    Wish_Index?: SortOrder
    Genshin_UID?: SortOrder
    DrawID?: SortOrder
    DrawTime?: SortOrder
    DrawType?: SortOrder
    Item_Name?: SortOrder
    Rarity?: SortOrder
  }

  export type Genshin_DrawSumOrderByAggregateInput = {
    Wish_Index?: SortOrder
  }

  export type StarRail_DrawCountOrderByAggregateInput = {
    Wish_Index?: SortOrder
    StarRail_UID?: SortOrder
    DrawID?: SortOrder
    DrawTime?: SortOrder
    DrawType?: SortOrder
    Item_Name?: SortOrder
    Rarity?: SortOrder
  }

  export type StarRail_DrawAvgOrderByAggregateInput = {
    Wish_Index?: SortOrder
  }

  export type StarRail_DrawMaxOrderByAggregateInput = {
    Wish_Index?: SortOrder
    StarRail_UID?: SortOrder
    DrawID?: SortOrder
    DrawTime?: SortOrder
    DrawType?: SortOrder
    Item_Name?: SortOrder
    Rarity?: SortOrder
  }

  export type StarRail_DrawMinOrderByAggregateInput = {
    Wish_Index?: SortOrder
    StarRail_UID?: SortOrder
    DrawID?: SortOrder
    DrawTime?: SortOrder
    DrawType?: SortOrder
    Item_Name?: SortOrder
    Rarity?: SortOrder
  }

  export type StarRail_DrawSumOrderByAggregateInput = {
    Wish_Index?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SummaryTableCountOrderByAggregateInput = {
    Summary_Table_Index?: SortOrder
    Game_UID?: SortOrder
    total_items?: SortOrder
  }

  export type SummaryTableAvgOrderByAggregateInput = {
    Summary_Table_Index?: SortOrder
    total_items?: SortOrder
  }

  export type SummaryTableMaxOrderByAggregateInput = {
    Summary_Table_Index?: SortOrder
    Game_UID?: SortOrder
    total_items?: SortOrder
  }

  export type SummaryTableMinOrderByAggregateInput = {
    Summary_Table_Index?: SortOrder
    Game_UID?: SortOrder
    total_items?: SortOrder
  }

  export type SummaryTableSumOrderByAggregateInput = {
    Summary_Table_Index?: SortOrder
    total_items?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use API_UsageDefaultArgs instead
     */
    export type API_UsageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = API_UsageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BannersDefaultArgs instead
     */
    export type BannersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = BannersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Character_BirthdaysDefaultArgs instead
     */
    export type Character_BirthdaysArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Character_BirthdaysDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CodesDefaultArgs instead
     */
    export type CodesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CodesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventsDefaultArgs instead
     */
    export type EventsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = EventsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Game_GeneralDefaultArgs instead
     */
    export type Game_GeneralArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Game_GeneralDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Games_UsersDefaultArgs instead
     */
    export type Games_UsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Games_UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Genshin_DrawDefaultArgs instead
     */
    export type Genshin_DrawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Genshin_DrawDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StarRail_DrawDefaultArgs instead
     */
    export type StarRail_DrawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = StarRail_DrawDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SummaryTableDefaultArgs instead
     */
    export type SummaryTableArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SummaryTableDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}